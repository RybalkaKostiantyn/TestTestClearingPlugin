<?xml version="1.0"?>
<doc>
    <assembly>
        <name>uStoreAPI</name>
    </assembly>
    <members>
        <member name="T:uStoreAPI.ActualDelivery">
            <summary>
            Actual Delivery Class.
            This class is used to handle actual deliveries which are created in the back office by the user who is handling the orders.
            The back office user may keep the tentative deliveries without a change, split or unite them, change the delivery service, etc.
            </summary>
        </member>
        <member name="M:uStoreAPI.ActualDelivery.#ctor">
            <summary>
            Initializes a new instance of the ActualDelivery class.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.ActualDeliveryID">
            <summary>
            The ID of this actual delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.DeliveryServiceID">
            <summary>
            The ID of the delivery service for this actual delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.ShipDate">
            <summary>
            Shipping date of the delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.UserID">
            <summary>
            The ID of the user who created this actual delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.StatusID">
            <summary>
            The status of this actual delivery.
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used.       
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.GroupName">
            <summary>
            The name of the delivery group of this actual delivery.
            The name of the group is a combination of the delivery method, store name and shipping address.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.DeliveryStatus">
            <summary>
            The delivery status of this actual delivery. For example: 'In Delivery'.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.TrackingNumber">
            <summary>
            The tracking number which was set by the back office user for this actual delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.ActualDelivery.DeliveryPrice">
            <summary>
            The cost of this actual delivery.
            Will be greater than zero only when shipping is used.
            </summary>
        </member>
        <member name="M:uStoreAPI.ActualDelivery.GetActualDelivery(System.Int32)">
            <summary>
            Returns the data of the actual delivery which its ID is given.
            </summary>
            <param name="actualDeliveryId">The ID of the requested actual delivery.</param>
            <returns>ActualDelivery object</returns>
        </member>
        <member name="M:uStoreAPI.ActualDelivery.ManualDeliveryArrived(System.Int32)">
            <summary>
            Moves the order products of the delivery to the Delivered queue.
            </summary>
            <param name="deliveryId">The ID of the actual delivery.</param>
        </member>
        <member name="M:uStoreAPI.ActualDelivery.CreateDelivery(System.Int32[],System.DateTime,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            Creates a delivery for the supplied delivery items, and saves the delivery date and tracking number. 
            Moves the order products to the Delivering queue.
            Actual delivery fulfillment and tracking is not performed automatically by this API. It's up to the integrator to execute the fulfillment, check the delivery status and move order to Delivered queue.
            </summary>
            <param name="deliveryItemIds">An array of IDs of the Delivery Item that are to be delivered together.</param>
            <param name="deliveryDatetime">Date of delivery.</param>
            <param name="trackingNumber">Optional. The tracking number to be stored for the delivery. Applicable only for shipping and not for mailing. Will not be stored for mailing.</param>
            <param name="deliveryPrice">Optional. The price for the delivery if exist.</param>
            <param name="deliveryServiceID">Optional. The selected delivery service if exist.</param>
            <returns>Delivery ID – An ID of the delivery that needs to be used to mark the order as shipped.</returns>
            <remarks>
            This method will throw an exception in these cases:
            	1. DeliveryItems array is empty or invalid.
            	2. One of the OrderProducts is not in Ready For Delivery queue.
            	3. The Delivery Service is not defined in the Store in which the items were ordered.
            	4. The Delivery Service is not defined for the items’ Delivery Provider.
            	5. The Delivery Service is not defined for the items’ Delivery Method.
            	6. Delivery Items have different Delivery Tentatives.
            	7. Delivery creation fails for some other reason.
            </remarks>
        </member>
        <member name="M:uStoreAPI.ActualDelivery.CreateDeliveryByOrderProducts(System.Int32[],System.DateTime,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            Creates a delivery for the supplied order products (items), and saves the delivery date and tracking number. 
            Moves the order products to the Delivering queue.
            Actual delivery fulfillment and tracking is not performed automatically by this API. It's up to the integrator to execute the fulfillment, check the delivery status and move order to Delivered queue.
            </summary>
            <param name="orderProductIds">An array of IDs of the Order Product that are to be delivered together.</param>
            <param name="deliveryDatetime">Date of delivery.</param>
            <param name="trackingNumber">Optional. The tracking number to be stored for the delivery. Applicable only for shipping and not for mailing. Will not be stored for mailing.</param>
            <param name="deliveryPrice">Optional. The price for the delivery if exist.</param>
            <param name="deliveryServiceID">Optional. The selected delivery service if exist.</param>
            <returns>Delivery ID – An ID of the delivery that needs to be used to mark the order as shipped.</returns>
            <remarks>
            This method will throw an exception in these cases:
            	1. OrderProducts array is empty or invalid.
            	2. One of the OrderProducts is not in Ready For Delivery queue.
            	3. The Delivery Service is not defined in the Store in which the items were ordered.
            	4. The Delivery Service is not defined for the items’ Delivery Provider.
            	5. The Delivery Service is not defined for the items’ Delivery Method.
            	6. Delivery Items have different Delivery Tentatives.
            	7. Delivery creation fails for some other reason.
            </remarks>
        </member>
        <member name="M:uStoreAPI.ActualDelivery.ValidateDelivery(System.Collections.Generic.List{uStore.Common.BLL.Delivery.Shipping.DeliveryItem},System.Int32,System.Nullable{System.Int32}@)">
            <summary>
            This method validates the delivery and will throw an error in the following cases:
            	1. One of the OrderProducts is not in Ready For Delivery queue.
            	2. The Delivery Service is not defined in the Store in which the items were ordered.
            	3. The Delivery Service is not defined for the items’ Delivery Provider.
            	4. The Delivery Service is not defined for the items’ Delivery Method.
            	5. Delivery Items have different Delivery Tentatives.
            	6. Delivery creation fails for some other reason.
            </summary>
        </member>
        <member name="M:uStoreAPI.ActualDelivery.CreateDeliveryByDeliveryItems(System.Int32[],System.DateTime,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            This method creates a delivery for the supplied delivery items.
            Moves the order products to the Delivering queue.
            <param name="deliveryItemIds">An array of IDs of the Delivery Item that are to be delivered together.</param>
            <param name="deliveryDatetime">Date of delivery.</param>
            <param name="trackingNumber">Optional. The tracking number to be stored for the delivery. Applicable only for shipping and not for mailing. Will not be stored for mailing.</param>
            <param name="deliveryPrice">Optional. The price for the delivery if exist.</param>
            <param name="deliveryServiceID">Optional. The selected delivery service if exist.</param>
            <returns>Delivery ID – An ID of the delivery that needs to be used to mark the order as shipped.</returns>
            </summary>
        </member>
        <member name="T:uStoreAPI.Address">
            <summary>
            Address Class represents billing, shipping or store address.
            </summary>
            <remarks>For future use</remarks>
        </member>
        <member name="M:uStoreAPI.Address.#ctor">
            <summary>
            Initializes a new instance of the Address class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.AddressID">
            <summary>
            ID of this address.
            Use 0 when adding a new address.
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.AddressTypeID">
            <summary>
            The type of the address.
            Possible address types are:
            Shipping Address                    = 1
            Billing Address                     = 2
            Global Shipping Address             = 3 
            Store Address                       = 4
            User Group Default Billing Address  = 5
            Store Address Used For Taxation     = 6
            Merchant Address                    = 7
            Manufacturer Address                = 8
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.DisplayName">
            <summary>
            Name of this address.
            </summary>
            <example>
            Home Address
            </example>
        </member>
        <member name="P:uStoreAPI.Address.PersonName">
            <summary>
            Name of the person
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.Company">
            <summary>
            Name of the company
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.Address1">
            <summary>
            First address line,
            may be used for a street name
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.Address2">
            <summary>
            Second address line
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.City">
            <summary>
            City Name
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.Zip">
            <summary>
            Zip Code
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.Phone">
            <summary>
            Phone Number
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.Fax">
            <summary>
            Fax Number
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.StateID">
            <summary>
            State ID (0 if there is no state)
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.CountryID">
            <summary>
            Country ID
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.CustomerID">
            <summary>
            ID of the customer to whom this address belongs.
            In case this address in not associated with any customer, it will have the value -1.
            [Obsolete("Please use UserID instead.")]
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.UserID">
            <summary>
            ID of the user to whom this address belongs.
            In case this address in not associated with any user, it will have the value -1.
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.AddressReference">
            <summary>
            Free text of up to 50 characters
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.TaxRegistration">
            <summary>
            Free text of up to 100 characters that can be used for store or manufacturer tax registration details
            </summary>
        </member>
        <member name="P:uStoreAPI.Address.Email">
            <summary>
            Email address of the person to contact
            </summary>
        </member>
        <member name="M:uStoreAPI.Address.AddAddress(uStoreAPI.Address)">
            <summary>
            Adds the given address to the system.
            </summary>
            <param name="address">The address to be added</param>
            <returns>The ID of the added address</returns>
        </member>
        <member name="M:uStoreAPI.Address.UpdateAddress(uStoreAPI.Address)">
            <summary>
            Updates the given address.
            </summary>
            <param name="address">
            An address object with the AddressID to be updated and the details to update it with.
            </param>
        </member>
        <member name="M:uStoreAPI.Address.GetAddress(System.Int32)">
            <summary>
            Returns the address with the given ID.
            </summary>
            <param name="addressId">ID of the requested address.</param>
            <returns>The data of the given address.</returns>
        </member>
        <member name="M:uStoreAPI.Address.GetAddressListByCustomer(System.Int32)">
            <summary>
            Returns the list of addresses of the given customer.
            </summary>
            <param name="customerId">ID of the customer whose addresses are requested.</param>
            <returns>An array of the data of the addresses of the given customer.</returns>
        </member>
        <member name="M:uStoreAPI.Address.GetAddressListByUser(System.Int32)">
            <summary>
            Returns the list of addresses of the given user.
            </summary>
            <param name="userId">ID of the user whose addresses are requested.</param>
            <returns>An array of the data of the addresses of the given user.</returns>
        </member>
        <member name="M:uStoreAPI.Address.Validate">
            <summary>
            Validates this address (only checks that required fields are available).
            </summary>
            <returns>True if and only if the Address ID is valid</returns>
        </member>
        <member name="M:uStoreAPI.Address.FillBllObject(System.Object)">
            <summary>
            Initialize uStore internal address object.
            </summary>
        </member>
        <member name="T:uStoreAPI.CircleAnalytics">
            <summary>
            CircleAnalytics class is used to handle Circle Analytics reports.
            </summary>
        </member>
        <member name="M:uStoreAPI.CircleAnalytics.GetAllReportsPerCircleProject(System.Int32)">
            <summary>
            Gets all reports for a given Circle XM Campaign order product.
            </summary>
            <param name="orderProductId"></param>
            <returns>List of circle analytic model</returns>
        </member>
        <member name="M:uStoreAPI.CircleAnalytics.RefreshAnalyticsReportsPerProject(System.Int32,System.Int32)">
            <summary>
            Gets all refreshed reports for a given Circle XM Campaign order product.
            </summary>
            <param name="orderProductId">The circle order product id</param>
            <param name="cultureId">the culture id for the report</param>
            <returns>List of circle analytic model with the refreshed data</returns>
        </member>
        <member name="T:uStoreAPI.CircleAnalyticsAPIModel">
            <summary>
            This class represents reports which are returned from Circle.
            </summary>
        </member>
        <member name="P:uStoreAPI.CircleAnalyticsAPIModel.LastRefreshed">
            <summary>
            The last time the report was refreshed.
            </summary>
        </member>
        <member name="P:uStoreAPI.CircleAnalyticsAPIModel.ReportUrl">
            <summary>
            The URL for the report's image.
            </summary>
        </member>
        <member name="T:uStoreAPI.CircleProjectOrderProductDetails">
            <summary>
            CircleProjectOrderProductDetails class represents additional details of the XM Campaign order product.
            </summary>
        </member>
        <member name="P:uStoreAPI.CircleProjectOrderProductDetails.CircleProjectID">
            <summary>
            Gets or sets the Circle project ID of the XM Campaign order product.
            </summary>
        </member>
        <member name="P:uStoreAPI.CircleProjectOrderProductDetails.CircleFamilyID">
            <summary>
            Gets or sets the Circle family ID of the XM Campaign order product.
            </summary>
        </member>
        <member name="P:uStoreAPI.CircleProjectOrderProductDetails.CircleTouchPointID">
            <summary>
            Gets or sets the Circle touchpoint ID of the touchpoint order product.
            If the order product is not a Circle touchpoint, it gets Guid.Empty.
            </summary>
        </member>
        <member name="T:uStoreAPI.Clearing">
            <summary>
            Clearing services
            </summary>
        </member>
        <member name="M:uStoreAPI.Clearing.GetClearingUnCompletedPath(System.Int32,System.Int32,System.String)">
            <summary>
            In case of failed clearing process, 
            the user should be redirected to the checkout final page again.
            </summary>
            <param name="storeID">Current Store ID.</param>
            <param name="orderID">Current Order ID.</param>
            <param name="errMessage">Optional message to be shown on the checkout page.</param>
            <returns>Url to the checkout page.</returns>
        </member>
        <member name="M:uStoreAPI.Clearing.GetClearingCompletePath(System.Int32,System.Int32)">
            <summary>
            In case of success completion of the clearing process, 
            the user should be redirected to the checkout complete page.
            </summary>
            <param name="storeID">Current Store ID.</param>
            <param name="orderID">Current Order ID.</param>
            <returns>Url to the checkout complete page.</returns>
        </member>
        <member name="M:uStoreAPI.Clearing.RedirectClearingCompleted(System.Int32,System.Xml.XmlDocument,System.Int32)">
            <summary>
            Finalize order in case the clearing was completed. 
            - update order details to the database.
            - change the cart to order.
            - change the clearingStatus to 0.
            </summary>
            <param name="orderID">Current Order ID.</param>
            <param name="clearingResult">Result of the clearing from clearing provider (optional).</param>
            <param name="cultureID">Current Culture ID used in store.</param>
        </member>
        <member name="M:uStoreAPI.Clearing.ClearingFailed(System.Int32,System.Xml.XmlDocument)">
            <summary>
            Update order status when clearing failed.        
            </summary>
            <param name="orderID">Current Order ID.</param>
            <param name="clearingResult">Result of the clearing from clearing provider (optional).</param>
        </member>
        <member name="M:uStoreAPI.Clearing.GetClearingConfigutaion(System.Int32)">
            <summary>
            Get clearing plug-in configuration xml.
            </summary>
            <param name="orderID">Current Order ID.</param>
            <returns>A clearing plug-in configuration xml.</returns>
        </member>
        <member name="T:uStoreAPI.CurrencyInfo">
            <summary>
            Currency class is used to handle currencies.
            </summary>
        </member>
        <member name="M:uStoreAPI.CurrencyInfo.#ctor">
            <summary>
            Initializes a new instance of the Currency class.
            </summary>
        </member>
        <member name="P:uStoreAPI.CurrencyInfo.CurrencyId">
            <summary>
            The ID of this currency.
            </summary>
        </member>
        <member name="P:uStoreAPI.CurrencyInfo.Name">
            <summary>
            The Name of this currency.
            </summary>
        </member>
        <member name="P:uStoreAPI.CurrencyInfo.Symbol">
            <summary>
            The Symbol of this currency.
            </summary>
        </member>
        <member name="P:uStoreAPI.CurrencyInfo.Abbreviation">
            <summary>
            The three letter abbreviation of this currency.
            </summary>
        </member>
        <member name="M:uStoreAPI.CurrencyInfo.GetCurrency(System.Int32)">
            <summary>
            Gets Currency by Id.
            </summary>
            <param name="currencyId">The Id of the currency.</param>
            <returns>Data of the given Currency Id.</returns>
        </member>
        <member name="M:uStoreAPI.CurrencyInfo.GetCurrencyByAbbreviation(System.String)">
            <summary>
            Gets currency by 3 letter abbreviation.
            </summary>
            <param name="abbreviation">3 letter abbreviation of the requested currency.</param>
            <returns>Data of the currency with the given abbreviation.</returns>
        </member>
        <member name="T:uStoreAPI.FileSubmissionDocument">
            <summary>
            Represents a submitted document (an uploaded file or a special template based on a Dynamic/Static product) of the component OrderProduct.
            </summary>
        </member>
        <member name="P:uStoreAPI.FileSubmissionDocument.SubOrderProductID">
            <summary>
            Gets the ID of the component OrderProduct of this document.
            </summary>
        </member>
        <member name="P:uStoreAPI.FileSubmissionDocument.Title">
            <summary>
            Gets the title of the document. By default it's the name of the uploaded file, or a Dynamic/Static product name.
            </summary>
        </member>
        <member name="P:uStoreAPI.FileSubmissionDocument.FilePath">
            <summary>
            Gets the path to the uploaded or parsed file in a shared folder.
            </summary>
        </member>
        <member name="P:uStoreAPI.FileSubmissionDocument.DocumentPages">
            <summary>
            Gets the array of the document's pages, in the order of their appearance.
            </summary>
        </member>
        <member name="M:uStoreAPI.FileSubmissionDocument.#ctor">
            <summary>
            Initializes a new instance of the FileSubmissionDocument class.
            </summary>
        </member>
        <member name="M:uStoreAPI.FileSubmissionDocument.ConvertToPDF(System.String,System.String)">
            <summary>
            Converts a given Office file to a PDF file. Supported file types are .pdf, .doc, .docx, .ppt, .pptx.
            This method is asynchronous; it may take a while before the file is created. 
            If the destination file already exists, it will be overridden.
            </summary>
            <param name="srcFilePath">The path of the Office file to be converted.</param>
            <param name="dstFilePath">The path of the PDF file to be created.</param>
        </member>
        <member name="M:uStoreAPI.FileSubmissionDocument.GeneratePreflightInformation(System.String,System.String)">
            <summary>
            Generates a preflight file in the given location for the given PDF file. 
            This method is asynchronous; The process is over when the file is in place. 
            If the destination file already exists, it will be overridden.
            </summary>
            <param name="pdfFilePath">The path of the PDF file to preflight.</param>
            <param name="xmlFilePath">The path of the XML file that will be created and will contain the preflight information.</param>
            <remarks>
            If you are creating a new application, that application should contain the Preflight folder.
            You can copy this folder from uStoreWSAPI application or CustomerApp application.
            </remarks>
        </member>
        <member name="M:uStoreAPI.FileSubmissionDocument.GenerateThumbnails(System.String,System.String)">
            <summary>
            Generates .jpg thumbnails in the given folder path for each page in the given PDF file. The folder will be created by this method.
            This method is asynchronous; when the process is over, a file named done.txt will be written in the folder.
            If the destination folder already exists, it will be overridden.
            </summary>
            <param name="pdfFilePath">The path of the PDF file for which thumbnails will be created.</param>
            <param name="thumbnailsFolderPath">The path of the folder that will be created containing the thumbnails.</param>
            <remarks>
            If you are creating a new application, that application should contain the Ghostscript folder.
            You can copy this folder from uStoreWSAPI application or CustomerApp application.
            </remarks>
        </member>
        <member name="T:uStoreAPI.General.Parameter">
            <summary>
            Key-value pair
            </summary>
        </member>
        <member name="F:uStoreAPI.General.Parameter.Key">
            <summary>
            The key of this parameter.
            </summary>
        </member>
        <member name="F:uStoreAPI.General.Parameter.Value">
            <summary>
            The value corresponding to the key.
            </summary>
        </member>
        <member name="T:uStoreAPI.General.Generals">
            <exclude/>
        </member>
        <member name="T:uStoreAPI.General.ErrorCodes">
            <exclude/>
        </member>
        <member name="T:uStoreAPI.General.FaultCode">
            <exclude/>
        </member>
        <member name="T:uStoreAPI.General.uStoreAPIException">
            <exclude/>
        </member>
        <member name="T:uStoreAPI.Localization">
            <summary>
            Localization class is used in order to handle uStore localizations.
            </summary>
        </member>
        <member name="M:uStoreAPI.Localization.GetLocalizedString(System.String,System.Int32)">
            <summary>
            Returns the localized text for the given string ID in the given culture.
            </summary>
            <param name="stringId">The string ID which its localized text should be returned.</param>
            <param name="cultureId">The ID of the culture in which the localized text should be returned.</param>
            <returns>Localized text string</returns>
        </member>
        <member name="M:uStoreAPI.Localization.GetPageResources(System.String,System.String,System.Int32)">
            <summary>
            Returns the localization resources for the given page
            </summary>
            <param name="project">The namespace in which the desired page resides</param>
            <param name="page">The name of the page, for example login_aspx or myCtrl_ascx</param>
            <param name="cultureId">The ID of the culture in which the localized text will be returned</param>
            <returns>An array of Localization Resource objects</returns>
        </member>
        <member name="T:uStoreAPI.LocalizationResource">
            <summary>
            This class represents a localization resource for a control on the page
            </summary>
        </member>
        <member name="M:uStoreAPI.LocalizationResource.#ctor">
            <summary>
            Initializes a new instance of the LocalizationResource class.
            </summary>
        </member>
        <member name="P:uStoreAPI.LocalizationResource.Project">
            <summary>
            The namespace to which this resource applies
            </summary>
        </member>
        <member name="P:uStoreAPI.LocalizationResource.Page">
            <summary>
            The page to which this resource applies
            </summary>
        </member>
        <member name="P:uStoreAPI.LocalizationResource.Control">
            <summary>
            The control which is localized by this resource
            </summary>
        </member>
        <member name="P:uStoreAPI.LocalizationResource.Property">
            <summary>
            The property of the control which is localized by this resource
            </summary>
            <example>
            Text
            ToolTip
            ErrorMessage
            </example>
        </member>
        <member name="P:uStoreAPI.LocalizationResource.CultureID">
            <summary>
            The ID of the culture in which the localized text is.
            </summary>
        </member>
        <member name="P:uStoreAPI.LocalizationResource.LocalizedText">
            <summary>
            The localized text of this resource
            </summary>
        </member>
        <member name="T:uStoreAPI.LogAPI">
            <summary>
            Log Class serves as a facade for writing a log entry using EnterpriseLibrary LAB.
            The logs are written according to the loggingConfiguration section of the web.config file of the invoking site.
            </summary>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteInfo(System.String)">
            <summary>
            Write a new informational log entry.
            </summary>
            <param name="message">Message body to log.</param>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteWarning(System.String)">
            <summary>
            Write a new warning log entry.
            </summary>
            <param name="message">Message body that describes the warning.</param>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteError(System.String)">
            <summary>
            Write a new error log entry.
            </summary>
            <param name="message">Message body that describes the error.</param>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteError(System.String,System.Exception)">
            <summary>
            Write a new error log entry.
            </summary>
            <param name="message">Message body that describes the error.</param>
            <param name="ex">Exception that is the cause of this error.</param>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteFatal(System.String)">
            <summary>
            Write a new fatal log entry. Use for decisive importance errors only.
            </summary>
            <param name="message">Message body that describes the error to log.</param>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteFatal(System.String,System.Exception)">
            <summary>
            Write a new fatal log entry. Use for decisive importance errors only 
            </summary>
            <param name="message">Message body that describes the error.</param>
            <param name="ex">Exception that is the cause of this error.</param>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteDebug(System.String)">
            <summary>
            Write a new log entry for debugging.
            </summary>
            <param name="message">Message body to log.</param>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteObjectInfo(System.String,System.Object)">
            <summary>
            Write a new informational log entry, including a list of all object's fields and properties and their values.
            </summary>
            <param name="message">A message to start with.</param>
            <param name="obj">The object to log</param>
            <remarks>
            FOR INTERNAL XMPie USE ONLY !!!
            Method may be removed or altered in future version!
            </remarks>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteObjectDebug(System.String,System.Object)">
            <summary>
            Write a new log entry for debugging, including a list of all object's fields and properties and their values.
            </summary>
            <param name="message">A message to start with.</param>
            <param name="obj">The object to log</param>
            <remarks>
            FOR INTERNAL XMPie USE ONLY !!!
            Method may be removed or altered in future version!
            </remarks>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteMethodInfo(System.Object[])">
            <summary>
            Write a new informational log entry, with two lines: one containing method name, and the other containing the method parameters and their values
            </summary>
            <param name="parameters">The parameters themselves, in the same order as in the calling method</param> 
            <remarks>
            FOR INTERNAL XMPie USE ONLY !!!
            Method may be removed or altered in future version!
            </remarks>
        </member>
        <member name="M:uStoreAPI.LogAPI.WriteMethodDebug(System.Object[])">
            <summary>
            Write a new log entry for debugging, with two lines: one containing method name, and the other containing the method parameters and their values
            </summary>
            <param name="parameters">The parameters themselves, in the same order as in the calling method</param> 
            <remarks>
            FOR INTERNAL XMPie USE ONLY !!!
            Method may be removed or altered in future version!
            </remarks>
        </member>
        <member name="T:uStoreAPI.DeliveryItem">
            <summary>
            Delivery Item Class is used to handle delivery items.
            There is at least one delivery item for each order product. 
            If an order product shipment is splitted, there will more than one delivery item.
            </summary>
        </member>
        <member name="M:uStoreAPI.DeliveryItem.#ctor">
            <summary>
            Initializes a new instance of the DeliveryItem class.
            </summary>
        </member>
        <member name="P:uStoreAPI.DeliveryItem.DeliveryItemID">
            <summary>
            The ID of this delivery item.
            </summary>
        </member>
        <member name="P:uStoreAPI.DeliveryItem.TentativeDeliveryID">
            <summary>
            The ID of the tentative delivery this item is part of.
            </summary>
        </member>
        <member name="P:uStoreAPI.DeliveryItem.ActualDeliveryID">
            <summary>
            The ID of the actual delivery this item is part of.
            In case this delivery item was not delivered yet, it will have the value -1.
            </summary>
        </member>
        <member name="P:uStoreAPI.DeliveryItem.OrderProductID">
            <summary>
            The ID of the order product to which this delivery item belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.DeliveryItem.QuantityPerRecipient">
            <summary>
            The number of copies per recipient which are delivered.
            </summary>
        </member>
        <member name="P:uStoreAPI.DeliveryItem.OrderQueueID">
            <summary>
            The ID number of the queue in which this delivery item is located.
            In case the order product is not in a delivery queue yet, it will have the value -1. 
            In that case, the order queue ID can be retrieved from the corresponding OrderProduct object.
            </summary>
        </member>
        <member name="T:uStoreAPI.FieldOption">
            <summary>
            Field Option Class.
            This class is a set of value and text. It is used as an option whenever the admin has defined a closed set of options for the customer
            to select from. For exampple, Customization Dials and Properties will have at least one Field Option in case the admin configured the User Interface.
            control to be a drop down list, a radio button list, etc.
            </summary>
        </member>
        <member name="M:uStoreAPI.FieldOption.#ctor">
            <summary>
            Initializes a new instance of the FieldOption class.
            </summary>
        </member>
        <member name="P:uStoreAPI.FieldOption.ID">
            <summary>
            The ID of this Field Option.
            </summary>
        </member>
        <member name="P:uStoreAPI.FieldOption.Text">
            <summary>
            The display text of this Field Option.
            </summary>
        </member>
        <member name="P:uStoreAPI.FieldOption.Value">
            <summary>
            The value of this Field Option.
            </summary>
        </member>
        <member name="T:uStoreAPI.PaperSize">
            <summary>
            Paper Size class is used to retrieve paper size information.
            Paper Size is used in the document submission area.
            </summary>
        </member>
        <member name="M:uStoreAPI.PaperSize.#ctor">
            <summary>
            Initializes a new instance of the PaperSize class.
            </summary>
        </member>
        <member name="P:uStoreAPI.PaperSize.PaperSizeId">
            <summary>
            The ID of the Paper Size.
            </summary>
        </member>
        <member name="P:uStoreAPI.PaperSize.DisplayName">
            <summary>
            The Paper Size Display Name.
            </summary>       
        </member>
        <member name="P:uStoreAPI.PaperSize.Width">
            <summary>
            The Paper Size Width.
            </summary>
        </member>
        <member name="P:uStoreAPI.PaperSize.Height">
            <summary>
            The Paper Size Height.
            </summary>
        </member>
        <member name="M:uStoreAPI.PaperSize.GetPaperSize(System.Int32)">
            <summary>
            Returns the data of the given Paper Size.
            </summary>
            <param name="paperSizeId">ID of the requested Paper Size.</param>
            <returns>Data of the given Paper Size.</returns>
        </member>
        <member name="T:uStoreAPI.Permission">
            <summary>
            Permission class is used to handle user permissions.
            </summary>
        </member>
        <member name="M:uStoreAPI.Permission.IsAllowed(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Indicates whether the given user is allowed to perform the given operation on the given Resource.
            </summary>
            <param name="userId">ID of the user whose permission is requested.</param>
            <param name="resourceTypeId">
            Type of the Resource for which the user permission is requested.
            Possible Resource types:
            AdminApp			= 1,
            CustomerApp			= 2,
            Store				= 3,
            AdminUserList		= 4,
            CustomerList		= 5,
            OrderList			= 6,
            ReportList			= 7,
            StoreList			= 8,
            UserType			= 9,
            Order				= 10,
            Settings			= 11,
            OrderHandlingStatus	= 12, (Also known as Queue)
            OrderHandlingAction	= 13,
            GTE					= 14, (Persets/System Setup)
            Product             = 15,
            ProductGroup        = 16,
            WSAPI               = 17       
            </param>
            <param name="resourceId">
            ID of the Resource for which the user permission is requested.
            Use -1 in order to verify whether the user has permissions for all Resources from the given type.
            </param>
            <param name="actionId">
            Action to perform for which the user permission is requested.
            Possible Actions:
            View			= 1,
            Edit			= 2,
            Create			= 3,
            Execute			= 4,
            Remove			= 5,
            Duplicate		= 6
            </param>
            <returns>True if and only if the given user has permissions for the combination of the given Resource &amp; Action.</returns>
        </member>
        <member name="M:uStoreAPI.Permission.AddPermission(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds the permission to perform the given operation on the given Resource to the given user.
            </summary>
            <param name="name">The name of this permission.</param>
            <param name="description">A detailed description of this permission.</param>
            <param name="userTypeId">
            ID of the user type to add the permission to.
            Available user types:
            Customer            = 1
            Store Administrator = 2
            Store Operator      = 3
            uStore Superuser    = 4
            </param>
            <param name="userId">
            ID of the user to whom the permission is added.
            -1 can be used in order to set the permission for all users of the given type.
            </param>
            <param name="resourceTypeId">
            Type of the Resource to which the user permission is added.
            Available Resource types:
            AdminApp			= 1,
            CustomerApp			= 2,
            Store				= 3,
            AdminUserList		= 4,
            CustomerList		= 5,
            OrderList			= 6,
            ReportList			= 7,
            StoreList			= 8,
            UserType			= 9,
            Order				= 10,
            Settings			= 11,
            OrderHandlingStatus	= 12, (Also known as Queue)
            OrderHandlingAction	= 13,
            GTE					= 14, (Persets/System Setup)
            Product             = 15,
            ProductGroup        = 16,
            WSAPI               = 17 
            </param>
            <param name="resourceId">
            ID of the Resource to which the user permission is added.
            -1 can be used in order to set the permission for all Resources of the given type.
            </param>
            <param name="actionId">
            ID of the Action that the user will be allowed to perform for the given Resource.
            Available Actions:
            View			= 1,
            Edit			= 2,
            Create			= 3,
            Execute			= 4,
            Remove			= 5,
            Duplicate		= 6
            </param>
            <param name="isAllowed">Specifies whether the user permission will be granted or denied</param>
            <remarks>
            Permissions may be general or specific to a Resource and/or user. 
            General permissions may be granted to all the users of a specific user type, and/or to all Resources of a specific type. 
            A specific permission precedes a general permission. For example, granting a specific permission to Product #5 for Customer #2, 
            and generally denying permission to all other users of type 'customer' to this Product, will result in Product #5  being invisible to all customers except Customer #2.
            </remarks>
        </member>
        <member name="M:uStoreAPI.Permission.IsAccessAllowed(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Indicates whether the given User is assigned the given permission.
            Use this overload for Storefront permissions.
            </summary>
            <param name="userId">ID of the User whose permission is requested.</param>
            <param name="permissionTypeId">
            Type of the requested Permission.
            Possible Permission types:   
            ViewStore           = 1
            ViewAdminApp        = 2
            ViewAdminUserList   = 3
            ViewCustomerList    = 4
            ViewOrderList       = 5
            ViewReportList      = 6
            ViewStoreList       = 7
            EditAdminUserList   = 8
            EditCustomerList    = 9
            CreateUser          = 10
            CreateStore         = 11
            DeleteStore         = 12
            ExecuteOrder        = 13
            ViewSettings        = 14
            DuplicateStore      = 15
            ViewQueue           = 16
            ViewAction          = 17
            ViewGTE             = 18
            ViewProduct         = 19
            ViewProductGroup    = 20
            ViewCustomerApp     = 21
            ExecuteWSAPI        = 22
            </param>
            <param name="entityId">
            ID of the Entity for which the user permission is requested.
            Use -1 in case the permission type is general and the permission does not relate to a specific entity.
            </param>
            <param name="storeId">
            ID of the store to which the given entity belongs.
            </param>
            <returns>True if and only if the given user has permission of the given type for the given entity.</returns>
        </member>
        <member name="M:uStoreAPI.Permission.IsAccessAllowed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indicates whether the given user is assigned the given permission.
            Use this overload for Back Office permissions.
            </summary>
            <param name="userId">ID of the user whose permission is requested.</param>
            <param name="permissionTypeId">
            Type of the requested Permission.
            Possible Permission types:   
            ViewStore           = 1
            ViewAdminApp        = 2
            ViewAdminUserList   = 3
            ViewCustomerList    = 4
            ViewOrderList       = 5
            ViewReportList      = 6
            ViewStoreList       = 7
            EditAdminUserList   = 8
            EditCustomerList    = 9
            CreateUser          = 10
            CreateStore         = 11
            DeleteStore         = 12
            ExecuteOrder        = 13
            ViewSettings        = 14
            DuplicateStore      = 15
            ViewQueue           = 16
            ViewAction          = 17
            ViewGTE             = 18
            ViewProduct         = 19
            ViewProductGroup    = 20
            ViewCustomerApp     = 21
            ExecuteWSAPI        = 22
            </param>
            <param name="entityId">
            ID of the Entity for which the user permission is requested.
            Use -1 in case the permission type is general and the permission does not relate to a specific entity.
            </param>
            <returns>True if and only if the given user has permission of the given type for the given entity.</returns>
        </member>
        <member name="T:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase">
            <summary>
            Defines methods and properties for implementing custom storefront authentication logic.
            </summary>
        </member>
        <member name="P:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.IsLoginPageAccessible">
            <summary>
            Gets a value indicating whether storefront login page (Login.aspx) can be accessed.
            When false, any request to login page will be redirected to storefront logout URL.
            </summary>
            <remarks>By default returns false.</remarks>
        </member>
        <member name="P:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.IsRegistrationEnabled">
            <summary>
            Gets a value indicating whether new user registartion in storefront is enabled.
            Usable only if <see cref="P:IsLoginPageAccessible"/> property value is True.
            </summary>
            <remarks>By default returns false.</remarks>
        </member>
        <member name="P:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.IsPasswordExpireEnabled">
            <summary>
            Gets a value indicating whether uStore password expire policy can be used.
            Usable only if <see cref="P:IsLoginPageAccessible"/> property value is True.
            </summary>
            <remarks>By default returns false.</remarks>
        </member>
        <member name="P:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.IsPasswordFormatEnabled">
            <summary>
            Gets a value indicating whether uStore password format policy can be used.
            Usable only if <see cref="P:IsLoginPageAccessible"/> property value is True.
            </summary>
            <remarks>By default returns false.</remarks>
        </member>
        <member name="P:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.IsAccountLockoutEnabled">
            <summary>
            Gets a value indicating whether uStore account lockout policy can be used.
            Usable only if <see cref="P:IsLoginPageAccessible"/> property value is True.
            </summary>
            <remarks>By default returns false.</remarks>
        </member>
        <member name="P:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.IsAssignmentToStoreEnabled">
            <summary>
            Gets a value indicating whether the option to share the same email between multiple users in different stores is enabled.
            </summary>
            <remarks>By default returns false.</remarks>
        </member>
        <member name="P:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.StoreAuthenticationTypeID">
            <summary>
            The Store Authentication Type of this custom authentication.
            Possible values are:
            0 = Undefined
            2 = LDAP
            </summary>
            <remarks>By default returns 0 = Undefined.</remarks>
        </member>
        <member name="M:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.Authenticate(System.Web.HttpContext,System.String@)">
            <summary>
            Override this method in order to perform a custom authentication by specified HTTP context.
            </summary>
            <param name="context">
            	An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic
            	server objects (for example, Request, Response, Session, and Server) used to service authentication logic.
            </param>
            <param name="uStoreUserName">
            	Could contain the login name of the uStore user if authenticated, or empty string if not authenticated or not implemented.
            </param>
            <returns>
            	True if authenticated or not implemented, false if not authenticated.
            </returns>
            <remarks>
            	By default not implemented, returns true and has an empty string assigned to out parameter.
            </remarks>
        </member>
        <member name="M:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.Authenticate(System.String,System.String,System.String@)">
            <summary>
            Override this method in order to perform a custom authentication by username and password, filled in Login form.
            </summary>
            <param name="username">The user name.</param>
            <param name="password">The password for the user.</param>
            <param name="uStoreUserName">
            	Could contain the login name of the uStore user if authenticated, or empty string if not authenticated or not implemented.
            </param>
            <returns>
            	True if authenticated or not implemented, false if not authenticated.
            </returns>
            <remarks>
            	By default not implemented, returns true and has an empty string assigned to out parameter.
            </remarks>
        </member>
        <member name="M:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.OnPageInit(System.Web.UI.Page)">
            <summary>
            Override this method in order to execute an additional logics on page initialization.
            </summary>
            <param name="page">The page which is being initializing.</param>
            /// <remarks>
            	By default not implemented.
            </remarks>
        </member>
        <member name="E:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.Logout">
            <summary>
            Raise this event on user's Logout.
            </summary>
        </member>
        <member name="M:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.DoLogout">
            <summary>
            Forces the <see cref="E:uStoreAPI.PluginBase.Authentication.CustomAuthenticationBase.Logout"/> event to be raised and enables to execute an additional logics on user logout.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.Clearing.ClearingLogicBase">
            <summary>
            Handles clearing using a payment processing service (e.g., Verisign).
            </summary>
            <example>
            <code>
            public class MyClearingLogic : ClearingLogicBase
            {
            	public MyClearingLogic()
            	{}
            
            	public MyClearingLogic(XmlDocument pConfigXML)
            	{
            		ConfigXML=pConfigXML;
            	}
            
            	
            	public override ValidationResult DoClearing(Currency currency, decimal amount, System.Xml.XmlDocument userData, out System.Xml.XmlDocument resultData)
            	{
            		resultData = null;
            
            		// This example assumes that the clearing service only supports transactions in US Dollars
            		if (currency.Abbreviation != &quot;USD&quot;)
            		{
            			ValidationResult res = new ValidationResult(false);
            			res.AddErrorMsg(&quot;Payment must be done in US Dollars only&quot;);
            			return res;
            		}
            
            		// Gets configuration information saved by the configuration control
            		string userName = ConfigXML.SelectSingleNode(&quot;//ConfigData/UserName&quot;).InnerText;
            		string host = ConfigXML.SelectSingleNode(&quot;//ConfigData/Host&quot;).InnerText;
            		
            		// Gets clearing information
            		string cardNumber = userData.SelectSingleNode(&quot;//CreditCard/CardNumber&quot;).InnerText;			
            		string expirationDate = userData.SelectSingleNode(&quot;//CreditCard/ExpirationDate&quot;).InnerText;
            		
            		// Gets the price
            		string price = String.Format(System.Globalization.CultureInfo.InvariantCulture.NumberFormat, &quot;{0:0.00}&quot;, amount);
            
            		// Write here code for sending a request to the clearing service provider.
            		// Parse the response and create a ValidationResult object accordingly.
            		if (&lt;condition of successful transaction&gt;)
            													{
            														result = new ValidationResult(true);
            													}
            		else
            		{
            			result = new ValidationResult(false);
            			result.AddErrorMsg(&quot;Please check the credit card information&quot;);
            			
            		}
            
            		return result;
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:uStoreAPI.PluginBase.Clearing.ClearingPluginConfigurationBase">
            <summary>
            Base class of the Clearing Plugin Configuration User Interface.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.Clearing.ClearingUserDataBase">
            <summary>
            Graphical User Interface (GUI) of clearing data collection. For example, credit card collection.
            </summary>
            <example>
            <code>
            public class MyCreditCardCollection : ClearingUserDataBase
            {
            	protected System.Web.UI.WebControls.TextBox txtCreditCardNo;
            
            	public MyCreditCardCollection()
            	{
            	}
            
            	public MyCreditCardCollection(XmlDocument pConfigXML) : base(pConfigXML)
            	{
            	}
            	
            	private void Page_Load(object sender, System.EventArgs e)
            	{
            	}
            
            	override protected void OnInit(EventArgs e)
            	{
            		InitializeComponent();
            		base.OnInit(e);
            	}
            
            	private void InitializeComponent()
            	{
            		this.Load += new System.EventHandler(this.Page_Load);
            	}
            
            	public override string AccountIdentifier
            	{
            		get
            		{
            			return concealedNumber = &quot;XXXX-XXXX-XXXX-&quot; + txtCreditCardNo.Text.Substring(12);
            		}
            	}
            
            	public override bool PreserveUserData
            	{
            		get
            		{
            			return true;
            		}
            	}
            
            	public override XmlDocument UserData
            	{
            		get
            		{
            			XmlDocument xmlDoc = new XmlDocument();
            			xmlDoc.LoadXml(&quot;&lt;CreditCard/&gt;&quot;);
            			
            			// Creates CardNumber element.
            			XmlElement xmlElm = xmlDoc.CreateElement(&quot;CardNumber&quot;);
            			xmlElm.InnerText = txtCreditCardNo.Text;
            			xmlDoc.DocumentElement.AppendChild(xmlElm);
            
            			return xmlDoc;
            		}
            	}
            
            	public override string FormatUserDataForBilling(XmlDocument userData)
            	{
            		return userData.SelectSingleNode(&quot;//CreditCard/CardNumber&quot;).InnerText;
            	}
            
            	public override ValidationResult Validate()
            	{
            		ValidationResult vr = new ValidationResult(true);
            		
            		// Validates the number of digits in the credit card.
            		if(txtCreditCardNo.Text.Length == 16)
            		{
            			vr.IsValid = true;
            		}
            
            		return vr;
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:uStoreAPI.PluginBase.CustomUserControlBase">
            <summary>
            Declares an interface for creating custom user controls to be embedded in the Customer Application (i.e. header, footer).
            </summary>    
        </member>
        <member name="T:uStoreAPI.PluginBase.DialUserControl.AdminDialUserControlBase">
             <summary>
             Interface for admin side of a Dial User Control (DUC)
             </summary>
             <example>
             <code>
             &lt;table cellSpacing=&quot;3&quot; cellPadding=&quot;3&quot; border=&quot;0&quot; width=&quot;100&#37;&quot;&gt;
             	&lt;TR&gt;
             		&lt;TD class=&quot;formpromptL&quot; width=&quot;20&#37;&quot;&gt;Default Value:&lt;/TD&gt;
             		&lt;TD class=&quot;formfield&quot;&gt;
             			&lt;asp:TextBox id=&quot;DefaultValueTB&quot; runat=&quot;server&quot; CssClass=&quot;formfield&quot; Width=218&gt;&lt;/asp:TextBox&gt;
             		&lt;/TD&gt;
             	&lt;/TR&gt;
             &lt;/table&gt;
            
            public class AdminStringTextBox :  System.Web.UI.UserControl, IDialAdminUICtrl
            {
            		protected System.Web.UI.WebControls.TextBox DefaultValueTB;
             		
            		private bool mEnabled = true;
            		public bool Enabled
            		{
            			get{return mEnabled;}
            			set
            			{
            				mEnabled = value;
            				SetControlsState();
            			}
            		}
            
            		string IDialAdminUICtrl.UProduceAddress
            		{
            			get{return ViewState[&quot;UProduceAddress&quot;].ToString();} 
            			set{ViewState[&quot;UProduceAddress&quot;] = value;} 
            		}
            		string IDialAdminUICtrl.UProduceCustomerName
            		{
            			get{return ViewState[&quot;UProduceCustomerName&quot;].ToString();} 
            			set{ViewState[&quot;UProduceCustomerName&quot;] = value;} 
            		}
             
            		string IDialAdminUICtrl.UProduceUser
            		{
            			get{return ViewState[&quot;UProduceUser&quot;].ToString();} 
            			set{ViewState[&quot;UProduceUser&quot;] = value;} 
            		}
             
            	 	string IDialAdminUICtrl.UProducePassword
             	{
             		get{return ViewState[&quot;UProducePassword&quot;].ToString();} 
             		set{ViewState[&quot;UProducePassword&quot;] = value;} 
             	}
             
            		int IDialAdminUICtrl.UProduceDocID
            		{
            			get{return (int)ViewState[&quot;UProduceDocID&quot;];} 
             		set{ViewState[&quot;UProduceDocID&quot;] = value;} 
             	}
             
             	int IDialAdminUICtrl.StoreID
             	{
             		get{return (int)ViewState[&quot;StoreID&quot;];} 
             		set{ViewState[&quot;StoreID&quot;] = value;} 
             	}
             	int IDialAdminUICtrl.MallID
             	{
             		get{return (int)ViewState[&quot;MallID&quot;];} 
             		set{ViewState[&quot;MallID&quot;] = value;} 
             	}
             
             		int IDialAdminUICtrl.AssetSourceUploadID
             	{
             		get{return (int)ViewState[&quot;AssetSourceUploadID&quot;];} 
             		set{ViewState[&quot;AssetSourceUploadID&quot;] = value;} 
             	}
             	int IDialAdminUICtrl.AssetSourceSelID
             	{
             		get{return -1;} 
             		set{} 
             	}
             	string IDialAdminUICtrl.DefaultValue
             	{
             		get{return DefaultValueTB.Text;} 
             		set{DefaultValueTB.Text = value;} 
             	}
             	string IDialAdminUICtrl.ValueOptionsXML
             	{
             		get{return &quot;&quot;;} 
             		set{} 
             	}
             
             	string IDialAdminUICtrl.UIControlParamsXML
             	{
             		get{return &quot;&quot;;} 
             		set{} 
             	}	
                     
             	void IDialAdminUICtrl.DoOK()
             	{
             	}
             
             	void IDialAdminUICtrl.DoCancel()
             	{
             	}
             
             	private void Page_Load(object sender, System.EventArgs e)
             	{
             		SetControlsState();
             	}
             
             	private void SetControlsState()
             	{
             		DefaultValueTB.Enabled = Enabled;
             	}
             }
             </code></example>
        </member>
        <member name="T:uStoreAPI.PluginBase.DialUserControl.CustomerDialUserControlBase">
             <summary>
             A base class for all customer side Dial User Controls (DUC)
             </summary>
             <example><code>
             &lt;TABLE id=&quot;tblMain&quot; runat=&quot;server&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;0&quot; width=&quot;100&#37;&quot; border=&quot;0&quot;
             	height=&quot;0&quot;&gt;
             	&lt;TR&gt;
             		&lt;TD width=&quot;190&quot;&gt;
             			&lt;asp:label id=&quot;LblDial&quot; runat=&quot;server&quot; CssClass=&quot;FormLabel&quot;&gt;&lt;/asp:label&gt;
             			&amp;nbsp;
             			&lt;asp:Label id=&quot;LblDescription&quot; runat=&quot;server&quot; CssClass=&quot;Tooltip&quot;&gt;[what&apos;s this?]&lt;/asp:Label&gt;
             		&lt;/TD&gt;
             		&lt;td align=&quot;left&quot;&gt;
             			&lt;asp:textbox id=&quot;StringTextBox&quot; runat=&quot;server&quot; CssClass=&quot;FormField&quot; Width=&quot;214&quot;&gt;&lt;/asp:textbox&gt;
             		&lt;/td&gt;
             		&lt;td align=&quot;left&quot;&gt;
             			&lt;asp:PlaceHolder id=&quot;DialValidation&quot; runat=&quot;server&quot;&gt;&lt;/asp:PlaceHolder&gt;
             			&lt;div style=&quot;DISPLAY: none&quot;&gt;&lt;asp:TextBox id=&quot;HdnDialId&quot; runat=&quot;server&quot; BorderWidth=&quot;0px&quot; Height=&quot;0px&quot; Width=&quot;0px&quot; CssClass=&quot;hide&quot;&gt;&lt;/asp:TextBox&gt;
             				&lt;asp:TextBox id=&quot;HdnActualValue&quot; runat=&quot;server&quot; BorderWidth=&quot;0px&quot; Height=&quot;0px&quot; Width=&quot;0px&quot; CssClass=&quot;hide&quot;&gt;&lt;/asp:TextBox&gt;&lt;/div&gt;
             		&lt;/td&gt;
             	&lt;/TR&gt;
             &lt;/TABLE&gt;
            
             	public class DialString : CustomerDialUserControlBase
             	{
             		protected System.Web.UI.WebControls.PlaceHolder DialValidation;
             		protected System.Web.UI.WebControls.TextBox StringTextBox;
             		protected System.Web.UI.WebControls.TextBox HdnDialId;
             		protected System.Web.UI.WebControls.TextBox HdnActualValue;
             		protected System.Web.UI.WebControls.Label LblDescription;
             		protected System.Web.UI.HtmlControls.HtmlTable tblMain;
             		protected System.Web.UI.WebControls.Label LblDial;
             
             		private void Page_Load(object sender, System.EventArgs e)
             		{
             			StringTextBox.Enabled = ((IUIBuildingBlock)this).Enabled;
             		}
             		
             		public override string DialLabel
             		{ 
             			get
             			{
             				return LblDial.Text;
             			} 
             			set
             			{
             				LblDial.Text = value;
             			} 
             		} 
             
             		public override string DialValue
             		{ 
             			get
             			{
             				return StringTextBox.Text.Trim();
             			} 
             			set
             			{
             				StringTextBox.Text = value.Trim();
             				HdnActualValue.Text = value;
             			} 
             		} 
             
             		public override string DialId
             		{ 
             			get
             			{
             				return HdnDialId.Text;
             			} 
             			set
             			{
             				HdnDialId.Text = value;
             			} 
             		} 
             
             		public override int DialTabIndex
             		{ 
             			get
             			{
             				return 0;
             			} 
             			set
             			{
             				StringTextBox.TabIndex = (short)value;
             			} 
             		} 
             		
             		public override int IsModified
             		{ 
             			get
             			{
             				int isModified;
             				if (StringTextBox.Text == HdnActualValue.Text)
             				{ 
             					isModified = 0; 
             				}
             				else
             				{ 
             					isModified = 1; 
             				}
             				return isModified;
             			} 
             			set{int intValue = 0;} 
             		} 
             
             		public override string Description
             		{ 
             			get
             			{
             				return LblDescription.ToolTip;
             			} 
             			set
             			{
             				LblDescription.ToolTip = value;
             				if(value != string.Empty)
             				{
             					LblDescription.Visible = true;
             				}
             				else
             				{
             					LblDescription.Visible = false;
             				}
             			} 
             		}
             	}
             </code></example>
        </member>
        <member name="T:uStoreAPI.PluginBase.DocumentRepository.DocumentRepositoryBase">
            <summary>
            A user control class that allows to implement file submission (composite products) from local or external sources.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.DocumentRepository.DocumentRepositoryConfigurationBase">
            <summary>
            Base class of the Document Repository Plugin Configuration User Interface.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.ISecurePointPage">
            <summary>
            Indicates that the page is one of the SSL secure point pages.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.OrderAction.OrderActionBase">
            <summary>
            Base class for Order List actions.
            </summary>
            <example>
            <code>
            using uStoreAPI.PluginBase.OrderAction;
            
            namespace MyAssembly
            {
            	public class MyAction : OrderActionBase
            	{
            		public MyAction()
            		{
            		}
            
            		public override ValidationResult ExecuteAction(int[] jobGroupIDs, int[] orderProductIDs)
            		{
            			ValidationResult res = new ValidationResult(true);
            
            			// this action can handle only 1 item at a time
            			if (jobGroupIDs.Length + orderProductIDs.Length != 1)
            			{
            				throw new ArgumentException(&quot;Cannot handle more then 1 jobGroup or 1 orderProduct at a time.&quot;);
            			}
            
            			// handle an aggregation group
            			if (jobGroupIDs.Length == 1)
            			{
            				// Write here code to manipulate or use the aggregation group and its order items
            				// set the ValidationResult if needed
            			}
            			// handle an order item
            			else
            			{
            				// Write here code to manipulate or use the order item
            				// set the ValidationResult if needed
            				// If the order item should be transfered to another queue, write the following code
            				UpdateOrderProductStatus(orderProductIDs[0], -1, OrderProductHandlingStatusID, -1);	
            			}
            		
            			return res;
            		}
            
            		#region obsolete
            		public override void HandleOrder(int orderID)
            		{
            		}
            
            		protected override bool SpecificHandleOrderProduct(int orderProductID)
            		{
            			return true;
            		}
            		#endregion
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:uStoreAPI.PluginBase.Pricing.CostEngineBase">
            <summary>
            Base class for the Cost Engine Plugin.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.Pricing.PricingEngineBase">
            <summary>
            Base class for the Pricing Engine Plugin.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.RecipientList.RLConfigurationControlBase">
            <summary>
            Base class for a configuration control of a recipient list model.
            </summary>
            <example>
            <code>
            namespace MyRecipientList
            {
            	using System;
            	using System.Data;
            	using System.Drawing;
            	using System.Web;
            	using System.Web.UI.WebControls;
            	using System.Web.UI.HtmlControls;
            	using uStore.Common.BLL;
            
            	public class MyRecipientListConfig : RLBaseConfigControl
            	{
            
            		private void Page_Load(object sender, System.EventArgs e)
            		{
            			// write here code to initialize the page
            		}
            
            		protected override ValidationResult ValidateUI()
            		{
            			// call base.ValidateUI
            	 		ValidationResult vr = base.ValidateUI ();
            
            		 	// if base.ValidateUI did not return an error, do your own custom validations
            		 	if(vr.IsValid)
            		 	{
            				// Write here code to validate the configuration control
            		 		// Set vr.IsValid to false if the validation failed.
            		 		// Add an error message if needed to be displayed to the user: vr.AddErrorMsg(&quot;Error Occured&quot;)
            		 	}
            	 		return vr;
            		 }
            
            		protected override ValidationResult SaveUI()
            		{
            			ValidationResult vr = new ValidationResult(true);
            
            			// write here code that saves the configuration.
            			// Set vr.IsValid to false if the save failed.	
            			// Add an error message if needed to be displayed to the user: vr.AddErrorMsg(&quot;Error Occured&quot;)		
            
            			return vr;
            		}
            
            		override protected void OnInit(EventArgs e)
            		{
            			InitializeComponent();
            			base.OnInit(e);
            		}
            		
            		private void InitializeComponent()
            		{
            			this.Load += new System.EventHandler(this.Page_Load);
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:uStoreAPI.PluginBase.RecipientList.RLUIPluginBase">
            <summary>
            Base class for a recipient list UI plugin
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.RecipientList.RLLogicPluginBase">
            <summary>
            Base class for a recipient list logic plugin.
            This plugin is responsible for recipient list schema validation and saving the recipient list.
            </summary>
        </member>
        <member name="M:uStoreAPI.PluginBase.RecipientList.RLLogicPluginBase.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RLLogicPluginBase class. Should be called from any class inheriting RLLogicPluginBase.
            </summary>
            <param name="RecipientListModelID">The ID of the recipient list model.</param>
            <param name="storeID">The ID of the relevant store.</param>
            <param name="OrderProductID">The ID of the relevant order product.</param>
        </member>
        <member name="M:uStoreAPI.PluginBase.RecipientList.RLLogicPluginBase.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the RLLogicPluginBase class. Should be called from any class inheriting RLLogicPluginBase.
            </summary>
            <param name="pConfiguration">An XML document containing the plugin specific configuration.</param>
        </member>
        <member name="T:uStoreAPI.PluginBase.Trigger.ActionPluginBase">
            <summary>
            Base class for a messaging/action plugin.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.Trigger.ActionPluginConfigurationBase">
            <summary>
            Base class of the Action plugin configuration control.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.Trigger.FilterPluginBase">
            <summary>
            Base class for a Messaging/Action plugin filter.
            </summary>
        </member>
        <member name="T:uStoreAPI.PluginBase.Trigger.FilterPluginConfigurationBase">
            <summary>
            Base class of the Plugin Configuration User Interface.
            </summary>
        </member>
        <member name="T:uStoreAPI.ProductInventory">
            <summary>
            Product Inventory class is used to described the inventory properites of a certain product.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.ProductID">
            <summary>
            The ID of the product to which this inventory object relates.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.InventoryEnabled">
            <summary>
            Is inventory enabled
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.InventoryQuantity">
            <summary>
            Inventory quantity on the shelf
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.SafetyQuantity">
            <summary>
            Safety quantity of the inventory, can be a positive or a negative integer.
            If positive - how many units should be "saved" and not sold
            If negative - how many units can be sold above the InventoryQuantity
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.StoreInventoryQuantity">
            <summary>
            Total storefront inventory, which is calculated this way: InventoryQuantity - SafetyQuantity;
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.UseInventoryInStore">
            <summary>
            Is the product using the inventory feature in store 
            (this controls messages in storefront and the out of stock behaviour).
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.AllowOrderOutOfStock">
            <summary>
            Can the product be ordered when it's out of stock (StoreInventoryQuantity is 0)
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.TriggerLowInventory">
            <summary>
            Should the event of low quantity be triggered
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductInventory.TriggerLowInventoryQuantity">
            <summary>
            The quantity of the product when the event of low quantity should be triggered
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductInventory.ReadInventoryLevel(System.Int32)">
            <summary>
            Read the on-shelf inventory level for a certain product.
            </summary>
            <param name="productID">productID</param>
            <returns>current on-shelf inventory level</returns>
        </member>
        <member name="M:uStoreAPI.ProductInventory.ReadInventoryLevel(System.Int32,System.String)">
            <summary>
            Read the on-shelf inventory level for a certain product with externalProductId, in a certain storeID.
            </summary>
            <param name="storeID">storeID</param>
            <param name="externalProductId">externalProductId</param>
            <returns>current on-shelf inventory level</returns>
        </member>
        <member name="M:uStoreAPI.ProductInventory.Update(System.Int32,System.Int32)">
            <summary>
            Updates the inventoryAmount for a certain productID. (overrides the current on-shelf inventory amount).
            </summary>
            <param name="productID">productID</param>
            <param name="inventoryAmount">inventoryAmount</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:uStoreAPI.ProductInventory.Update(System.Int32,System.String,System.Int32)">
            <summary>
            Updates the inventoryAmount for a certain product with externalProductId, in a certain storeID. 
            (overrides the current on-shelf inventory amount).
            </summary>
            <param name="storeID">storeID</param>
            <param name="externalProductId">externalProductId</param>
            <param name="inventoryAmount">inventoryAmount</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:uStoreAPI.ProductInventory.Increase(System.Int32,System.Int32)">
            <summary>
            Increases the inventory of a certain productID with a certain amount.
            </summary>
            <param name="productID">productID</param>
            <param name="amount">amount to increase</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:uStoreAPI.ProductInventory.Increase(System.Int32,System.String,System.Int32)">
            <summary>
            Increases the inventory of a certain product with externalProductId in a certain storeID, with the given amount. 
            </summary>
            <param name="storeID">storeID</param>
            <param name="externalProductId">externalProductId</param>
            <param name="amount">amount to increase</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:uStoreAPI.ProductInventory.Decrease(System.Int32,System.Int32)">
            <summary>
            Decreases the inventory of a certain productID with a certain amount.
            </summary>
            <param name="productID">productID</param>
            <param name="amount">amount to decrease</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:uStoreAPI.ProductInventory.Decrease(System.Int32,System.String,System.Int32)">
            <summary>
            Decreases the inventory of a certain product with externalProductId in a certain storeID, with the given amount.
            </summary>
            <param name="storeID">storeID</param>
            <param name="externalProductId">externalProductId</param>
            <param name="amount">amount to decrease</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="T:uStoreAPI.Production">
            <summary>
            Production Class is used to handle Tickets and Proof output.
            </summary>
        </member>
        <member name="M:uStoreAPI.Production.GetProofTicketId(System.Int32,System.Int32)">
            <summary>
            Creates a Proof Ticket in uProduce for the Order Product and returns its ID.
            </summary>
            <param name="orderProductId">ID of the Order Product whose Proof Ticket is requested.</param>
            <param name="NumberOfRecords">The number of Proof Recipients to be proofed.</param>
            <returns>A Proof job Ticket ID.</returns>
        </member>
        <member name="M:uStoreAPI.Production.GetProcessTicketId(System.Int32)">
            <summary>
            Creates a Process Ticket in uProduce for the Order Product and returns its ID.
            </summary>
            <param name="orderProductId">ID of the Order Product whose Process Ticket is requested.</param>
            <returns>A Process job Ticket ID.</returns>
        </member>
        <member name="M:uStoreAPI.Production.DownloadProof(System.Int32)">
            <summary>
            Returns the Proof files for the given Proof. 
            </summary>
            <param name="proofId">ID of the Proof to download.</param>
            <returns>An array of file contents. There is a file for each page of the Document.</returns>
        </member>
        <member name="M:uStoreAPI.Production.SendToProduction(System.Int32)">
            <summary>
            Sends the given Order Product to production and moves it to 'Production In Progress' Queue.
            </summary>
            <param name="orderProductId">ID of the Order Product that will be sent to production.</param>
        </member>
        <member name="M:uStoreAPI.Production.SendToProductionOneCopy(System.Int32)">
            <summary>
            Sends the given Order Product to production printing only one copy.
            </summary>
            <param name="orderProductId">ID of the Order Product that will be sent to production.</param>
            <remarks>
            This method only sends the order product to production.
            In order to move it to the next queue use <see cref="M:uStoreAPI.OrderProduct.MoveToQueue(System.Int32,System.Int32)"/>.
            </remarks>        
        </member>
        <member name="M:uStoreAPI.Production.GetProductionOutputUrl(System.Int32)">
            <summary>
            Returns a URL to the production output of the given Order Product.
            </summary>
            <param name="orderProductId">ID of the Order Product whose production output is requested.</param>
            <returns>URL to the production output file.</returns>
        </member>
        <member name="M:uStoreAPI.Production.GetProductionStatus(System.Int32)">
            <summary>
            Gets a composition (a.k.a production) status.
            In case of success of print composition, returns location of composed files.
            </summary>
            <param name="orderProductId">ID of the Order Product whose production output is requested.</param>
            <returns>Production Status object.</returns>
        </member>
        <member name="M:uStoreAPI.Production.GetDestinationOutputFilesLocation(System.Int32,uStore.Common.BLL.OrderProductDetails)">
            <summary>
            Builds processed output files location string for specific Order Product.
            </summary>
            <param name="storeId">The store id of the current order product</param>
            <param name="orderProduct"></param>
            <returns>A string represents the location and file names of the output</returns>
        </member>
        <member name="M:uStoreAPI.Production.LaunchCircleProjectOrderProduct(System.Int32)">
            <summary>
            Launch the circle project from a given order product 
            </summary>
            <param name="orderProductId">ID of the Order Product that will be sent to production.</param>
            <remarks>
            Please use <see cref="M:uStoreAPI.Trigger.InvokeEvent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,uStoreAPI.General.Parameter[])"/> for changing the order product status in store front
            </remarks>
        </member>
        <member name="M:uStoreAPI.Production.TerminateCircleProjectOrderProduct(System.Int32)">
            <summary>
            Terminate a circle order product. archive it's instance in circle
            </summary>
            <param name="orderProductId">ID of the Order Product that will be sent to production.</param>
            <remarks>
            Please use <see cref="M:uStoreAPI.Trigger.InvokeEvent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,uStoreAPI.General.Parameter[])"/> for changing the order product status in store front
            </remarks>
        </member>
        <member name="T:uStoreAPI.ProductionStatus">
            <summary>
            Production job result.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionStatus.OrderProductID">
            <summary>
            The Order Item ID number.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionStatus.UproduceProductionJobID">
            <summary>
            Uproduce Production JobID
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionStatus.Status">
            <summary>
            The status of composition (production).
            Possible values are:
            Possible values: 
            Unknown     = -1,
            Waiting     = 1,
            In Progress = 2,
            Completed   = 3,
            Failed      = 4,
            Aborting    = 5,
            Aborted     = 6,
            On Demand   = 7,
            Suspended   = 8.   
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionStatus.ProductionMessages">
            <summary>
            Production messages xml.
            e.g.
            <code>
            &lt;ProductionMessages&gt;
                &lt;ProductionMessage&gt;
                    &lt;Details&gt;Message goes here&lt;/Details&gt; 
                    &lt;stationName&gt;uProduceServer1&lt;/stationName&gt; 
                    &lt;severity&gt;Error&lt;/severity&gt;
                    &lt;context&gt;SQL Query&lt;/context&gt; 
                &lt;/ProductionMessage&gt;
            &lt;/ProductionMessages&gt;
            </code>
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionStatus.DestinationOutputFilesLocation">
            <summary>
            Production output files location.
            Will have a value only for print composition which succeeded.
            The file location will vary according to the destination type.
            </summary>
        </member>
        <member name="T:uStoreAPI.ProductionMessage">
            <summary>
            A class that represents a single production message
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductionMessage.#ctor">
            <summary>
            Initializes a new instance of the ProductionMessage class.
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductionMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ProductionMessage class with the specified properties.
            </summary>
            <param name="details">The production error message as returned from uProduce.</param>
            <param name="stationName">The station name as returned from uProduce server.</param>
            <param name="severity">The severity level of the production message.</param>
            <param name="context">The context in which the production message was raised (SQL Server, Plan Interpreter, etc)</param>
        </member>
        <member name="P:uStoreAPI.ProductionMessage.Details">
            <summary>
            The production error message as returned from uProduce server.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionMessage.stationName">
            <summary>
            The station name as returned from uProduce server.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionMessage.severity">
            <summary>
            The severity level of the production message.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionMessage.context">
            <summary>
            The context in which the production message was raised (SQL Server, Plan Interpreter, etc)
            </summary>
        </member>
        <member name="T:uStoreAPI.ProductionMessagesList">
            <summary>
            A class that represents a list of production messages
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductionMessagesList.#ctor">
            <summary>
            Initializes a new instance of the ProductionMessagesList class.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductionMessagesList.ProductionMessage">
            <summary>
            Sets or gets an array of production messages
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductionMessagesList.AddProductionMessage(uStoreAPI.ProductionMessage)">
            <summary>
            Adds new production message to the list
            </summary>
            <param name="productionMessage">Single production message</param>
        </member>
        <member name="T:uStoreAPI.ProductPricing">
            <summary>For future use</summary>
            <exclude/>
        </member>
        <member name="P:uStoreAPI.ProductPricing.SelectableNumberOfCopies">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductPricing.DisplayTotalPrices">
            <summary>
            For future use
            </summary>
        </member>
        <member name="T:uStoreAPI.PropertyPrice">
            <summary>For future use</summary>
            <exclude/>
        </member>
        <member name="P:uStoreAPI.PropertyPrice.PropertyId">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:uStoreAPI.PropertyPrice.Option">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:uStoreAPI.PropertyPrice.FixedPrice">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:uStoreAPI.PropertyPrice.Prices">
            <summary>
            For future use
            </summary>
        </member>
        <member name="T:uStoreAPI.PriceStepPrice">
            <remarks>For future use</remarks>
        </member>
        <member name="P:uStoreAPI.PriceStepPrice.PriceStep">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:uStoreAPI.PriceStepPrice.Price">
            <summary>
            For future use
            </summary>
        </member>
        <member name="T:uStoreAPI.PriceStep">
            <remarks>For future use</remarks>
            <exclude/>
        </member>
        <member name="P:uStoreAPI.PriceStep.FromValue">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:uStoreAPI.PriceStep.Name">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:uStoreAPI.PriceStep.IsDisplayAsDropdown">
            <summary>
            For future use
            </summary>
        </member>
        <member name="T:uStoreAPI.DocumentPage">
            <summary>
            Represents a single page of a submitted document in the File Submission process.
            </summary>
        </member>
        <member name="P:uStoreAPI.DocumentPage.PageNumber">
            <summary>
            Gets the number of the page (1-based) in the original document.
            </summary>
        </member>
        <member name="P:uStoreAPI.DocumentPage.Height">
            <summary>
            Gets the height of the page in mm.
            </summary>
        </member>
        <member name="P:uStoreAPI.DocumentPage.Width">
            <summary>
            Gets the width of the page in mm.
            </summary>
        </member>
        <member name="P:uStoreAPI.DocumentPage.ColorTypeID">
            <summary>
            Gets the color scheme of the page. Possible values are:
            Blank = 1,
            Grayscale = 2,
            Color = 3
            </summary>
        </member>
        <member name="P:uStoreAPI.DocumentPage.IsRotated">
            <summary>
            Gets an indication whether this page has changed its original orientation.
            </summary>
        </member>
        <member name="M:uStoreAPI.DocumentPage.#ctor">
            <summary>
            Initializes a new instance of the DocumentPage class.
            </summary>
        </member>
        <member name="T:uStoreAPI.ProductUnit">
            <summary>
            ProductUnit is used to describe the names of the units that a certain product use, such as Pack, Item, Box, etc.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductUnit.IsPack">
            <summary>
            Gets a value indicating whether the ProductUnit is of type pack or single item.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductUnit.Name">
            <summary>
            Gets / sets the name in singular (e.g "Pack").
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductUnit.PluralName">
            <summary>
            Gets / sets the name in plural (e.g. "Packs").
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductUnit.GetProductUnitForProduct(System.Int32,System.Int32)">
            <summary>
            Gets the ProductUnit object for this productID and cultureID
            </summary>
            <param name="productID">productID</param>
            <param name="cultureID">cultureID</param>
            <returns>ProductUnit object for productID</returns>
        </member>
        <member name="T:uStoreAPI.Asset">
            <summary>
            Asset Class. Asset is a graphic file that feeds a graphic ADOR Object in a Document.
            </summary>
        </member>
        <member name="M:uStoreAPI.Asset.#ctor">
            <summary>
            Initializes a new instance of the Asset class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.AssetSourceAssetID">
            <summary>
            ID of the Asset.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.AssetSourceID">
            <summary>
            ID of the Asset Source to which this Asset belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.DisplayOrder">
            <summary>
            The display order of this Asset in the Assets list of the Asset Source.
            An Asset with a lower display order will be displayed above an Asset with a higher display order.
            The lowest possible display order is one.
            </summary>        
        </member>
        <member name="P:uStoreAPI.Asset.StatusID">
            <summary>
            The status of this Asset.
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.Name">
            <summary>
            The name of this image.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.Description">
            <summary>
            A detailed description of this image.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.IsServerSource">
            <summary>
            True if this image originates from an Asset Source in uProduce. False if this image was uploaded.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.CacheLocation">
            <summary>
            The relative location of this image file.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.CustomerID">
            <summary>
            The ID of the customer that uploaded this Asset image.
            In case this Asset image was not uploaded by a customer, this value is -1.
            [Obsolete("Please use UserID instead.")]
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.UserID">
            <summary>
            The ID of the user that uploaded this Asset image.
            In case this Asset image was not uploaded by a user, this value is -1.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.Title">
            <summary>
            The image title in the format 'Asset n', where n is the ID of this Asset in uProduce.
            For example, a title can be 'Asset 80'.
            </summary>
        </member>
        <member name="P:uStoreAPI.Asset.AssetType">
            <summary>
            The file type of this Asset (for example, .jpg).
            </summary>
        </member>
        <member name="M:uStoreAPI.Asset.GetAssetList(System.Int32,System.Int32)">
            <summary>
            Returns the list of Assets which belong to the given Asset Source.
            </summary>
            <param name="assetSourceId">ID of the Asset Source whose Assets are requested.</param>
            <param name="customerId">
            ID of the customer whose Assets are also requested.
            Using -1 will return only Assets which are not associated with any customer.
            </param>
            <returns>
            An array of data of the Assets which belong to the given Asset Source (and customer, if it is also given).
            </returns>
        </member>
        <member name="M:uStoreAPI.Asset.GetAssetListOptionalUser(System.Int32,System.Int32)">
            <summary>
            Returns the list of Assets which belong to the given Asset Source.
            </summary>
            <param name="assetSourceId">ID of the Asset Source whose Assets are requested.</param>
            <param name="userId">
            ID of the user whose Assets are also requested.
            Using -1 will return only Assets which are not associated with any user.
            </param>
            <returns>
            An array of data of the Assets which belong to the given Asset Source (and user, if it is also given).
            </returns>
        </member>
        <member name="M:uStoreAPI.Asset.GetAsset(System.Int32)">
            <summary>
            Returns the data of the given Asset.
            </summary>
            <param name="assetId">ID of the requested Asset.</param>
            <returns>Data of the given Asset.</returns>
        </member>
        <member name="M:uStoreAPI.Asset.DownloadAsset(System.Int32)">
            <summary>
            Returns the Asset image file.
            </summary>
            <param name="assetId">ID of the requested Asset.</param>
            <returns>The image file as an array of bytes.</returns>
        </member>
        <member name="T:uStoreAPI.AssetSource">
            <summary>
            Asset Source Class. 
            An Asset Source refers to a collection of Campaign Assets (for example, images, formatted text files, etc.) and its location. 
            An Asset Source can be defined either in uProduce, for a campaign being accessible by all customers, 
            or for a customer’s uploaded Assets, being accessible by the specific customer only.
            </summary>
        </member>
        <member name="M:uStoreAPI.AssetSource.#ctor">
            <summary>
            Initializes a new instance of the AssetSource class.
            </summary>
        </member>
        <member name="P:uStoreAPI.AssetSource.AssetSourceID">
            <summary>
            The ID of the Asset Source.
            </summary>
        </member>
        <member name="P:uStoreAPI.AssetSource.StoreID">
            <summary>
            The ID of the Store where the Dial that uses this Asset Source is defined.
            </summary>
        </member>
        <member name="P:uStoreAPI.AssetSource.Name">
            <summary>
            The name of the Asset Source.
            </summary>
        </member>
        <member name="P:uStoreAPI.AssetSource.Description">
            <summary>
            A detailed description of the Asset Source.
            </summary>
        </member>
        <member name="P:uStoreAPI.AssetSource.UproduceAssetSourceID">
            <summary>
            The ID of the Asset Source in uProduct server.
            </summary>
        </member>
        <member name="P:uStoreAPI.AssetSource.StatusID">
            <summary>
            The status of the Asset Source.
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used.
            </summary>
        </member>
        <member name="P:uStoreAPI.AssetSource.CacheLocation">
            <summary>
            The path to the Assets assigned to this Asset Source.
            </summary>
        </member>
        <member name="M:uStoreAPI.AssetSource.GetAssetSource(System.Int32)">
            <summary>
            Returns the data of the requested Asset Source.
            </summary>
            <param name="assetSourceId">ID of the requested Asset Source.</param>
            <returns>Data of the requested Asset Source.</returns>
        </member>
        <member name="T:uStoreAPI.Culture">
            <summary>
            Culture Class. This class contains culture-specific information, such as the language and country/region. 
            </summary>
        </member>
        <member name="M:uStoreAPI.Culture.#ctor">
            <summary>
            Initializes a new instance of the Culture class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Culture.CultureID">
            <summary>
            ID of the culture.
            </summary>
        </member>
        <member name="P:uStoreAPI.Culture.CultureCode">
            <summary>
            The culture code (Language Culture Name).
            For example: en-US.
            </summary>
        </member>
        <member name="P:uStoreAPI.Culture.DisplayName">
            <summary>
            The English name of the culture which can be used for display.
            For example: English - Australia, German - Germany.
            </summary>
        </member>
        <member name="P:uStoreAPI.Culture.LocalizedDisplayName">
            <summary>
            The local name of the culture which can be used for display.
            For example: English - Australia, Deutsch- Deutschland.
            </summary>
        </member>
        <member name="M:uStoreAPI.Culture.GetCulture(System.Int32)">
            <summary>
            Returns the data of the given culture.
            </summary>
            <param name="cultureId">ID of the requested culture.</param>
            <returns>Data of the requested culture.</returns>
        </member>
        <member name="M:uStoreAPI.Culture.GetCultureByStore(System.Int32)">
            <summary>
            Returns a list of the cultures which are used in the given Store.
            </summary>
            <param name="storeId">ID of a Store.</param>
            <returns>Array of the cultures which are used in the Store.</returns>
        </member>
        <member name="M:uStoreAPI.Culture.GetSetupCultureIdByStore(System.Int32)">
            <summary>
            Returns id of setupCulture by the given Store.
            </summary>
            <param name="storeId">ID of a Store.</param>
        </member>
        <member name="T:uStoreAPI.CustomizationStep">
            <summary>
            Customization Step Class is used to handle Customization steps. Customization steps are logical components of the Customization wizard.
            The wizard is used to guide customers through a Customization process in which they can specify fixed values for a selection of Dynamic Objects included in the Product.
            </summary>
        </member>
        <member name="M:uStoreAPI.CustomizationStep.#ctor">
            <summary>
            Initializes a new instance of the CustomizationStep class.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationStep.CustomizationStepID">
            <summary>
            ID of the Step.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationStep.CustomizationWizardID">
            <summary>
            ID of the Customization wizard to which this step belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationStep.Name">
            <summary>
            The name of this step.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationStep.Description">
            <summary>
            A detailed description of this step.
            This description is displayed to the customer when she gets to this step.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationStep.DisplayOrder">
            <summary>
            The display order of this step.
            Display order starts from zero, which is considered to be the first step.
            </summary>
        </member>
        <member name="M:uStoreAPI.CustomizationStep.GetCustomizationStepList(System.Int32,System.Int32)">
            <summary>
            Returns the list of Customization steps for the given Product.
            </summary>
            <param name="productId">ID of the Product whose Customization step list is requested.</param>
            <param name="cultureId">ID of the culture in which the Customization steps information (name, for example) is requested. This information can be retrieved using CultureWS.</param>
            <returns>An array of data of the Customization steps of the given Product.</returns>
        </member>
        <member name="M:uStoreAPI.CustomizationStep.GetCustomizationStep(System.Int32,System.Int32)">
            <summary>
            Returns the data of the given Customization step.
            </summary>
            <param name="customizationStepId">ID of the requested Customization step.</param>
            <param name="cultureId">ID of the culture in which the Customization step information (name, for example) is requested. This information can be retrieved using CultureWS.</param>
            <returns>Data of the given Customization step.</returns>
        </member>
        <member name="T:uStoreAPI.CustomizationDial">
            <summary>
            Dial (Customization Dial) Class. 
            A Dial is an ADOR Object or a Variable that is included in a Dynamic Document and has been marked as a “Campaign Dial”, thereby making it available for modification via uStore. The uStore Admin application enables administrators to choose which available Dials are to be accessible via the uStore Customer application, so that customers can customize their values. 
            </summary>
        </member>
        <member name="M:uStoreAPI.CustomizationDial.#ctor">
            <summary>
            Initializes a new instance of the CustomizationDial class.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.ID">
            <summary>
            The ID of the Dial.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.Name">
            <summary>
            The name of the Dial.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.Description">
            <summary>
            A detailed description of the Dial.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.ExternalID">
            <summary>
            An external ID to identify the CustomizationDial in other systems.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.DocID">
            <summary>
            The ID of the Document to which this Dial belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.DialTypeID">
            <summary>
            The type of the Dial (ADOR Object or Variable).
            Possible values are:
            1 = AdorText
            2 = AdorGraphic
            3 = AdorLink
            4 = AdorVisible
            5 = AdorTextFile
            6 = VarBool
            7 = VarDate
            8 = VarNumber
            9 = VarText
            10= AdorStyle.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.UproduceDialName">
            <summary>
            The name of the Dial in uProduce server.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.IsVariable">
            <summary>
            true if this Dial is a Variable,
            false if this Dial is an ADOR Object.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.DefaultValue">
            <summary>
            The default value of the Dial.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.Options">
            <summary>
            This member is not empty if the value of this Dial must be selected from a list.
            In that case this array contains all the possible options of this Dial.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.UIControlTypeID">
            <summary>
            The type of the user control that is used to display this Dial.
            Possible values are:
            3 = Multiline Text Input
            4 = Radio Button
            5 = Text Input
            6 = Image Selector
            7 = Popup Image Selector
            8 = Dropdown List
            9 = DateTime Picker
            10= Generic HTML
            11= Dropdown List Advanced
            12= Radio Button List Advanced
            13= Get Order Properties
            14= Checkbox.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.UIControlParamsXml">
            <summary>
            An XML that contains additional information about the control, such as, for example, its look and behavior.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.AssetSelectionSourceID">
            <summary>
            In case this Dial is a graphic ADOR Object and Asset selection is allowed, 
            this property refers to the ID of the Asset Source from which the customer can select Asset images.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.AssetUploadSourceID">
            <summary>
            In case this Dial is a graphic ADOR Object and upload is allowed, 
            this property refers to the ID of the Asset Source to which Asset images will be uploaded. 
            This Asset Source is dedicated to the specific customer.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.DisplayOrder">
            <summary>
            The display order of this Dial in the step.
            A Dial with a lower display order will be displayed above a Dial with a higher display order.
            The lowest possible display order is zero.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.DialValueAutoFillTypeID">
            <summary>
            The type of auto-filling for the Dial's user control.
            Possible values are:
            1 = None
            2 = UseDefaultValue
            3 = HistorySameProduct
            4 = HistoryAllProductsInStore
            5 = HistoryAllProductsInAllStores
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.StatusID">
            <summary>
            The status of this Customization Dial.
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDial.DependentOnFieldOptionID">
            <summary>
            If the dial is dependent on another dial, the ID of the option on which this dial is dependent.
            If the dial is independent, -1.
            </summary>
        </member>
        <member name="M:uStoreAPI.CustomizationDial.GetCustomizationDialList(System.Int32,System.Int32)">
            <summary>
            Returns the list of Dials that belong to the given Customization step.
            </summary>
            <param name="customizationStepId">ID of the Customization step whose Dials are requested.</param>
            <param name="cultureId">ID of the culture in which the Customization Dials information (name, for example) is requested. The data can be retrieved using CultureWS.</param>
            <returns>An array of the data of the Dials that are used in the given Customization step.</returns>
        </member>
        <member name="M:uStoreAPI.CustomizationDial.GetCustomizationDial(System.Int32,System.Int32)">
            <summary>
            Returns the data of the given Dial.
            </summary>
            <param name="customizationDialId">ID of the requested Customization Dial.</param>
            <param name="cultureId">ID of the culture in which the Customization Dial information (name, for example) is requested. The data can be retrieved using CultureWS</param>
            <returns>Data of the given Customization Dial.</returns>
        </member>
        <member name="M:uStoreAPI.CustomizationDial.GetCustomizationDialValueList(System.Int32)">
            <summary>
            Returns an array of all the Customization Dial values for the given Order Product.
            </summary>
            <param name="orderProductId">ID of the Order Product whose Customization Dial value list is requested.</param>
            <returns>An array of Customization Dial value data for the given Order Product.</returns>
        </member>
        <member name="M:uStoreAPI.CustomizationDial.GetCustomizationDialValue(System.Int32,System.Int32)">
            <summary>
            Returns the value of the given Dial in the given Order Product (Order Item).
            </summary>
            <param name="orderProductId">ID of the Order Product in which the Dial's value is requested.</param>
            <param name="customizationDialId">ID of the Dial whose value is requested.</param>
            <returns>Data of the given Dial value.</returns>
        </member>
        <member name="T:uStoreAPI.CustomizationDialValue">
            <summary>
            Customizattion DialValue class. 
            A Dial is an ADOR Object or a Variable that is included in a Dynamic Document and has been marked as a “Campaign Dial”, thereby making it available for modification via uStore. 
            The uStore Admin application enables administrators to choose which available Dials are to be accessible via the uStore Customer application, so that customers can customize their values. 
            The CustomizationDialValue class holds the value set to the Customization Dial in a specific Order Product (Order Item).
            </summary>
        </member>
        <member name="M:uStoreAPI.CustomizationDialValue.#ctor">
            <summary>
            Initializes a new instance of the CustomizationDialValue class.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDialValue.OrderProductDialValueID">
            <summary>
            Unique ID of the pair (Dial, OrderProduct).
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDialValue.OrderProductID">
            <summary>
            ID of the Order Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDialValue.ID">
            <summary>
            ID of the Dial.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDialValue.DialID">
            <summary>
            ID of the Dial.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDialValue.DialName">
            <summary>
            Name of the Dial, as defined in uProduce.
            </summary>
        </member>
        <member name="P:uStoreAPI.CustomizationDialValue.Value">
            <summary>
            The value of this Dial in this Order Product.
            </summary>
        </member>
        <member name="T:uStoreAPI.Document">
            <summary>
            Document class. 
            The uStore counterpart for a Document in a Campaign in uProduce. A Document is published to the web by exposing it as a uStore Product.
            </summary>
        </member>
        <member name="M:uStoreAPI.Document.#ctor">
            <summary>
            Initializes a new instance of the Document class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.ID">
            <summary>
            ID of this Document.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.ProductID">
            <summary>
            ID of the Product that is based on this Document.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.StoreID">
            <summary>
            ID of the Store to which this Document belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.Name">
            <summary>
            The name of this Document.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.Description">
            <summary>
            A detailed description of this Document.
            The description may be empty or up to 200 Unicode characters.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.DocTypeID">
            <summary>
            The type of this Document.
            Possible values are:
            1 = Dynamic Document (InDesign or XLIM)
            2 = Static Document
            3 = Email
            4 = Upload
            5 = Composite
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.DocumentXml">
            <summary>
            In case the Document is an XLIM document, the XML contains the Document itself.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.TemplateType">
            <summary>
            The type of this Document (only in case this is a Dynamic Document).
            Possible values are:
            1 = INDD
            2 = TXT
            3 = HTML
            4 = XLIM
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.ProofCountMax">
            <summary>
            The maximum number of Recipients to proof.
            If the customer is allowed to select the number of Recipients, this is their upper limit.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.ProofCountDefault">
            <summary>
            The default number of Recipients to proof.
            This will be the number of Recipients in every Proof unless the customer is allowed to select and selects another number.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.ProofAllowSelect">
            <summary>
            True if and only if the customer is allowed to select the number of Recipients to proof.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.CampaignID">
            <summary>
            The ID of the Campaign (in uStore) to which this Document belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.UproduceDocID">
            <summary>
            The ID of this Document in uProduce server.
            In case this Document is an Email Document, this is the ID of the Email Activity in uProduce.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.UproduceProofJobID">
            <summary>
            The ID of the Proof job which was generated in order to create the Proof Ticket for this Document.
            </summary>
            <remarks>When GDPR is enabled, jobs are deleted from uProduce. It is advised not to rely on the job existance.</remarks>
        </member>
        <member name="P:uStoreAPI.Document.UproduceProcessJobID">
            <summary>
            The ID of the Process job which was made in order to create the Process Ticket for this Document.
            </summary>
            <remarks>When GDPR is enabled, jobs are deleted from uProduce. It is advised not to rely on the job existance.</remarks>
        </member>
        <member name="P:uStoreAPI.Document.RecipientListSchemaXml">
            <summary>
            An XML that defines the schema of the Recipient list for this Document, including internal fields. Any uploaded Recipient list must match this schema.
            The root element of this XML is myXML and each field has the format 
            &lt;field&gt;&lt;name&gt;Field Name&lt;/name&gt;&lt;type&gt;Field Type&lt;/type&gt;&lt;comment&gt;A comment about this field&lt;/comment&gt;&lt;primary&gt;A value indicating whether this is the primary field&lt;/primary&gt;&lt;internal&gt;A value indicating whether this is the internal field&lt;/internal&gt;&lt;/field&gt;
            </summary>
            <example>
            <code>
            &lt;myXML&gt;
                &lt;field&gt;
                    &lt;name&gt;CustomerID&lt;/name&gt;
                    &lt;type&gt;NUMBER&lt;/type&gt;
                    &lt;comment/&gt;
                    &lt;primary&gt;BOOLEAN&lt;/primary&gt;
                    &lt;internal&gt;BOOLEAN&lt;/internal&gt;
                &lt;/field&gt;
                &lt;field&gt;
                    &lt;name&gt;Address&lt;/name&gt;
                    &lt;type&gt;TEXT&lt;/type&gt;
                    &lt;comment/&gt;
                    &lt;primary&gt;BOOLEAN&lt;/primary&gt;
                    &lt;internal&gt;BOOLEAN&lt;/internal&gt;
                &lt;/field&gt;
            &lt;/myXML&gt;
            </code>
            </example>
        </member>
        <member name="P:uStoreAPI.Document.ProofTicket">
            <summary>
            An XML which is the Proof Ticket of this Document.
            A Proof job for this Document will use a Ticket which is based on this Ticket.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.ProcessTicket">
            <summary>
            An XML which is the Process Ticket of this Document.
            A Process job for this Document will use a Ticket which is based on this Ticket.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.DownloadOutput">
            <summary>
            If the customer is not allowed to download the Output, this member will contain an empty string.
            If the customer is allowed to download the Output, it will contain a path to the download location, or the string 'DefaultDownloadOutput', 
            in case the download location is the default location.
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.StaticDocLocation">
            <summary>
            In case this Document is a Static Document, this is the relative location of the Document file itself.
            For example: \Store_01\Product_0001\Doc.jpg
            </summary>
        </member>
        <member name="P:uStoreAPI.Document.StaticDocProofLocation">
            <summary>
            In case this Document is a Static Document, this is the location of the Proof file in uStore\uStoreShared\StaticDocs.
            Therefore, the virtual path of this Document is "uStore\uStoreShared\StaticDocs\" + StaticDocProofLocation
            </summary>
            <example>
            \Store_01\Product_0001\Doc.jpg
            </example>
        </member>
        <member name="M:uStoreAPI.Document.GetDocumentByProduct(System.Int32)">
            <summary>
            Returns the Document data of the Document on which the given Product is based.
            </summary>
            <param name="productId">ID of the Product whose Document information is requested.</param>
            <returns>Data of the Document of the given Product.</returns>
        </member>
        <member name="M:uStoreAPI.Document.GetDocument(System.Int32)">
            <summary>
            Returns the data of the given Document.
            </summary>
            <param name="documentId">ID of the requested Document.</param>
            <returns>Data of the given Document.</returns>
        </member>
        <member name="T:uStoreAPI.Order">
            <summary>
            Order Class is used to handle orders.
            </summary>
            <remarks>
            Please pay attention that shipping information is no longer available in the order class,
            but can be retrieved using the new TentativeDelivery class.
            </remarks>
        </member>
        <member name="M:uStoreAPI.Order.#ctor">
            <summary>
            Initializes a new instance of the Order class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.OrderID">
            <summary>
            The ID of this order.
            This is an increasing number.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.EncryptedOrderID">
            <summary>
            The ID of this order, which is displayed for users.
            This number has a random part.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.StoreID">
            <summary>
            The ID of the Store in which this order was made.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.CustomerID">
            <summary>
            The ID of the customer to whom this order belongs.
            This ID is identical to the user ID.
            [Obsolete("Please use UserID instead.")]
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.UserID">
            <summary>
            The ID of the user to whom this order belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.DateCartCreated">
            <summary>
            The date &amp; time when the customer started this order process.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.DateOrderCreated">
            <summary>
            The date &amp; time when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.SubtotalPrice">
            <summary>
            The price of this order, exluding delivery, tax and discount.
            This is the sum of the cost of all the Order Products.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Name">
            <summary>
            The name of the person as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Company">
            <summary>
            The name of the company as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Email">
            <summary>
            The email address as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Add">
            <summary>
            The address line as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Add2">
            <summary>
            The 2nd address line as it appeared in the billing address when this order was submitted.
            This field may be empty
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_City">
            <summary>
            The city as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_StateName">
            <summary>
            The name of the State as it appeared in the billing address when this order was submitted.
            This field may be empty
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_StateID">
            <summary>
            The ID of the State as it appeared in the billing address when this order was submitted.
            This field may be empty
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Zip">
            <summary>
            The ZIP code as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Phone">
            <summary>
            The phone number as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_Fax">
            <summary>
            The fax number as it appeared in the billing address when this order was submitted.
            This field may be empty
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_CountryName">
            <summary>
            The name of the country as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Bill_CountryID">
            <summary>
            The ID of the country as it appeared in the billing address when this order was submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.ShippingCharges">
            <summary>
            The shipping cost of this order.
            This value is zero in case mailing is used or there is no delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.TaxAmount">
            <summary>
            The tax cost of this order.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.TotalPrice">
            <summary>
            The total price of this order, includig delivery, tax &amp; discount.
            This is the actual price to be payed by the customer.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.IsCart">
            <summary>
            Specifies whether this order is in the cart of the customer in the Store.
            True value means that the order has not been completed yet.
            False value means that the order has been completed and submitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.IsSaveForLater">
            <summary>
            Specifies whether this order is in the Save For Later cart of the customer in the Store.
            True value means that all the order items which are saved for later belong to this order.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.PaymentMethodID">
            <summary>
            The ID of the clearing configuration used in this order.
            For example, 1 = Invoice.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.DeliveryServiceID">
            <summary>
            The ID of the delivery service used in this order.
            For example:
            4 = Standard
            5 = Overnight.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.DeliveryPrice">
            <summary>
            The cost of mailing of this order.
            Zero in case shipping is used or there is no delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.Order.Cost">
            <summary>
            The cost of producing this order.
            </summary>
        </member>
        <member name="M:uStoreAPI.Order.GetOrder(System.Int32,System.Int32)">
            <summary>
            Returns the data of the given order, excluding the ordered products.
            Order Product list can be retrieved using OrderProductWS.
            </summary>
            <param name="orderId">ID of the requested order.</param>
            <param name="cultureId">ID of the culture in which the order information is requested. This information can be retrieved using CultureWS</param>
            <returns>Data of the given order.</returns>         
        </member>
        <member name="M:uStoreAPI.Order.GetOrderHistory(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the list of data of all orders made by the given user in the given store, apart for the user's cart or save for later orders.
            </summary>
            <param name="storeId">ID of the store in which the order history is requested</param>
            <param name="userId">ID of the user whose order history is requested</param>
            <param name="cultureId">
            ID of the culture in which country and state names will be returned
            This parameter is optional, use -1 in case country or state names are not desired. 
            In that case empty country and state names will be returned.
            </param>
            <returns>
            The list of data of the given user's past orders in the given store.
            </returns>
        </member>
        <member name="M:uStoreAPI.Order.GetCartId(System.Int32,System.Int32)">
            <summary>
            Returns the ID of the cart order of the given customer in the given store.
            Creates a new cart if no cart order exists.
            </summary>
            <param name="storeId">ID of the store in which the customer's cart ID is requested</param>
            <param name="customerId">ID of the customer whose cart ID is requested</param>
            <returns>ID of the cart order</returns>
        </member>
        <member name="M:uStoreAPI.Order.GetUserCartId(System.Int32,System.Int32)">
            <summary>
            Returns the ID of the cart order of the given user in the given store.
            Creates a new cart if no cart order exists.
            </summary>
            <param name="storeId">ID of the store in which the user's cart ID is requested</param>
            <param name="userId">ID of the user whose cart ID is requested</param>
            <returns>ID of the cart order</returns>
        </member>
        <member name="M:uStoreAPI.Order.UpdateBillingAddress(System.Int32,uStoreAPI.Address)">
            <summary>
            Updates the billing address of the given order.
            </summary>
            <param name="orderId">ID of the order to update it's billing address</param>
            <param name="billingAddress">The billing address to update the order with</param>
        </member>
        <member name="M:uStoreAPI.Order.UpdateBillingAddress(System.Int32,System.Int32)">
            <summary>
            Updates the billing address of the given order.
            </summary>
            <param name="orderID">ID of the order to update it's billing address</param>
            <param name="billingAddressID">ID of the billing address to update the order with</param>
        </member>
        <member name="M:uStoreAPI.Order.UpdateDelivery(System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the delivery info of the given order, prior to order submission.
            </summary>
            <param name="orderID">ID of the order to update it's shipping info</param>
            <param name="shippingAddressID">
            The ID of the shipping address to update the order with, if shipping delivery is used in order item(s).
            If no shipping delivery used - pass zero.
            </param>
            <param name="shippingDeliveryServiceID">
            ID of the shipping delivery service, that is used for shipping,
            If no shipping delivery used - pass zero.
            </param>
            <remarks>
            Order can have items with mailing, shipping, or void delivery.
            If at least one item uses shipping - a shipping address and delivery service must be provided.
            Split shipping is not supported.
            </remarks>
        </member>
        <member name="M:uStoreAPI.Order.UpdateClearing(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the clearing info of the given order, after payment, prior to order submission.
            </summary>
            <param name="orderID">ID of the order to update it's clearing info</param>
            <param name="paymentMethodID">ID of the payment method (ClearingConfigID from ClearingConfig table)</param>
            <param name="clearingResult">Result of the clearing, returned from clearing provider</param>
        </member>
        <member name="M:uStoreAPI.Order.SubmitOrder(System.Int32)">
            <summary>
            Submits the given order, using Invoice clearing and Void delivery method.
            </summary>
            <param name="orderId">ID of the order to submit</param>
            <remarks>
            Shipping and discount prices are not taken into account.
            if the order product is XM Campaign, the circle project instance will be activated.
            </remarks>
        </member>
        <member name="M:uStoreAPI.Order.SubmitOrder(System.Int32,System.Int32[])">
            <summary>
            Submits the Order Products from the given array in the scope of the order they currently belong to (i.e. the order of the first order product in the array).
            The passed orderId is deprecated and is not taken into account.
            All other order products that belong to the same order are moved to the next cart.
            Uses Invoice clearing and Void delivery.
            </summary>
            <param name="orderId">ID of the order to submit (this parameter is DEPRECATED - can pass any value)</param>
            <param name="orderProductIds">An array of order product IDs to submit.</param>
            <remarks>
            Shipping and discount prices are not taken into account
            if the order product is XM Campaign, the circle project instance will be activated
            </remarks>
        </member>
        <member name="M:uStoreAPI.Order.SubmitOrderWithClearingAndDelivery(System.Int32)">
            <summary>
            Submits the given order, assuming that clearing results and delivery info are already set in the order.
            </summary>
            <param name="orderId">ID of the order to submit</param>
            <remarks>
            Prior to calling this method, use SetClearing and SetDelivery metods.
            Discount prices are not taken into account.
            </remarks>
        </member>
        <member name="M:uStoreAPI.Order.GetOrderXML(System.Int32)">
            <summary>
            Retrieves order details in XML format.
            Wrapping the returning xml string with OrderXml in the code for backward compatibility reasons
            </summary>
            <param name="orderID">The ID of the order to get details for.</param>
            <returns>A string that represents an XML that contains the order.</returns>
        </member>
        <member name="M:uStoreAPI.Order.GetLatestOrdersXml(System.Int32)">
            <summary>
            uStore assigns a sequential SubmissionID for each order which is submitted and needs to be fulfilled.
            Calling the WS with a SubmissionId will generate an XML with order details of up to 50 orders with SubmissionID bigger than the passed SubmissionID.
            To get the next batch of orders, the biggest submissionID of the last batch should be used in the next call to the WS.
            Orders of that store must be set to be exportable by API in Store Setup page.
            </summary>
            <remarks>The XML exported by this method does not depend on any message template and cannot be customized.</remarks>
            <param name="submissionID">The WS will return all submitted orders that are greater than (not equal to) the submissionID.</param>
            <returns>A string that represents an xml that contains up to 50 orders.</returns>       
        </member>
        <member name="M:uStoreAPI.Order.GetOrdersXMLBySubmissionID(System.Int32)">
            <summary>
            This method is obsolete. Please use GetLatestOrdersXml instead.
            </summary>
        </member>
        <member name="M:uStoreAPI.Order.SubmitOrderHandleError(uStore.Common.BLL.Order,System.Boolean,System.Boolean)">
            <summary>
            Submits the given order, and handles the result. 
            If an error occured during the submit - throw it, and also write appropriate log messages. 
            </summary>
            <param name="orderDetails">The order to submit</param>
            <param name="useInvoiceClearing">True should be used for uStoreConnect style API, when order's clearing is ommited.
            Otherwise, prior to submission - order should have clearing related data set by SetClearing method.</param>
            <param name="useVoidDelivery">True should be used for uStoreConnect style API, when order's delivery is void.
            Otherwise, prior to submission - order should have delivery data set by SetDelivery method.</param>
        </member>
        <member name="M:uStoreAPI.Order.GetOrderWithItems(System.Int32[],System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Get the Order object that belongs to the given orderProductIds (the order that is related to the first order product).
            The Items of the returned Order object will contain only the requiered order products from the orderProductIds list, so that it can be submitted as is.
            The remaining order products that belong to this order are returned as checkoutLaterItemIDs, so that they can be later added to the next cart.
            </summary>
            <param name="orderProductIds">An array of order products IDs to checkout now</param>
            <param name="checkoutLaterItemIDs">out param - An array of order products IDs from this order to checkout later (if exist)</param>
            <returns></returns>
        </member>
        <member name="T:uStoreAPI.OrderProduct">
            <summary>
            Order Product Class is used to handle ordered Products.
            </summary>
        </member>
        <member name="M:uStoreAPI.OrderProduct.#ctor">
            <summary>
            Initializes a new instance of the OrderProduct class.
            </summary>
        </member>
        <member name="M:uStoreAPI.OrderProduct.#ctor(uStore.Common.BLL.KitOrderProduct,System.Boolean)">
            <summary>
            BeforeSubmission Kit should be displayed as a single item
            </summary>
            <param name="kitOP"></param>
            <param name="isSubmitted"></param>
        </member>
        <member name="P:uStoreAPI.OrderProduct.OrderProductID">
            <summary>
            The Order Item ID number.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.OrderID">
            <summary>
            The Order ID number.
            In case the order product is part of a composite order product, -1
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.ProductID">
            <summary>
            The ID number of the ordered Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.QuantityPerRecipient">
            <summary>
            Number of copies per Recipient.
            </summary>
            <remarks>
            When number of copies is variable and calculated by ADOR, returns -1.
            </remarks>
        </member>
        <member name="P:uStoreAPI.OrderProduct.NumRecipients">
            <summary>
            Number of Recipients, or 1 if Recipient list is not involved.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.TotalQuantity">
            <summary>
            Total number of copies (that is, the number of Recipients X the number of copies per Recipient).
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.ProductUnitPrice">
            <summary>
            Price of a single copy in this Order Item according to the relevant price range, excluding fixed cost and tax.
            </summary>
            <remarks>
            When number of copies is variable and calculated by ADOR, returns zero.
            </remarks>
        </member>
        <member name="P:uStoreAPI.OrderProduct.PricePerRecipient">
            <summary>
            Price of a total copies per recipient in this Order Item according to the relevant price range, excluding fixed cost and tax.
            </summary>
            <remarks>
            When number of copies is variable and calculated by ADOR, returns zero.
            </remarks>
        </member>
        <member name="P:uStoreAPI.OrderProduct.ProductPriceSubtotal">
            <summary>
            Total price of the Order Item excluding shipping price and tax.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.TotalPrice">
            <summary>
            Total price of the Order Item including mailing and excluding shipping and tax.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.RecipientListID">
            <summary>
            The Recipient list ID number used in this Order Item.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.RecipientListGdprDeleted">
            <summary>
            Indicates whether this item's RecipientList (if exists) XML data was deleted according to GDPR regulations.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.RecipientDataSourceID">
            <summary>
            The ID of the Data Source that is used in this Order Product.
            The ID has the value -1 in case no uProduct Recipient list is used.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.RecipientFilterID">
            <summary>
            The ID of the Recipient filter that is used in this Order Product.
            In case a Recipient Data Source is used, a filter or a table must be used.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.RecipientDataSourceTableID">
            <summary>
            The ID of the Recipient table that is used in this Order Product.
            In case a Recipient Data Dource is used, a filter or a table must be used.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.IsDraft">
            <summary>
            Indicates whether the Order Item is still a draft or it has been completed (moved to the Shopping Cart).
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.IsSavedDraft">
            <summary>
            Indicates whether the draft order has been saved, in order for the user to continue it later.
            Please note that this member can only be changed from 'false' to 'true'.
            Therefore, this Boolean value must be used together with IsDraft, which become 'false' once the Order is completed.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.ExtraParamsXml">
            <summary>
            The XML may contain additional information that may be required for this Order Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.DateAdded">
            <summary>
            The date when the customer started ordering the Product (selected the Product in the Product list and clicked 'Next').
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.OrderQueueID">
            <summary>
            The ID number of the queue in which the Order Item is located.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.UproduceJobID">
            <summary>
            The ID number of the last uProduce job that processed this Order Item.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.StatusID">
            <summary>
            The status of this Order Product.
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.RecipientListModelID">
            <summary>
            The ID of the Recipient list model (plug-in) that is used in this Order Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.DocumentXml">
            <summary>
            In case the Document in this Order Product is a XLIM document and uEdit was used,
            the XML contains the edited Document.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.AggregationCriteria">
            <summary>
            The criteria for aggregation for this Order Product. Order Products must have the same aggregation criteria in order to be aggregated.
            The aggregation criteria have the following format:
            DocumentName, ID: DocumentID, PropertyName: PropertyValue, where there is one property which affects aggregation.
            In case there are more properties that affect aggregation, they will be separated by commas and will have the following format: PropertyName: PropertyValue
            </summary>
            <example>
            Agent_Postcard.indd, ID: 1
            </example>
        </member>
        <member name="P:uStoreAPI.OrderProduct.JobGroupID">
            <summary>
            The ID of the job group of this Order Product.
            In case this Order Product is processed in a group, it will have a value greater than 1.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.DocAggregationCriteria">
            <summary>
            In case this Document is a XLIM document, it holds a unique number for the revision of the XLIM Document.
            It has the format uEdited by: {0} on {1} ({2}) where {0} is the userName, {1} is the time and {2} is a Guid.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.FlatCsvxFilePath">
            <summary>
            In case an aggregation job for this Order Product was completed successfully, this is the path to the generated CSV file.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.UproduceHandlingFlatJobID">
            <summary>
            In case this Order Product is aggregated with other Order Products, this is the ID of the flat job in uProduce.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.DeliveryMethod">
            <summary>
            The method used to deliver this Order Product.
            Possible values are:
            1 = Shipping
            2 = Mailing
            3 = Void.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.DeliveryServiceID">
            <summary>
            The ID of the delivery service used for this Order Product in case it uses mailing.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.DeliveryPrice">
            <summary>
            The cost of mailing this Order Product.
            Zero in case shipping is used or there is no delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.ParentOrderProductID">
            <summary>
            In case the order product is part of a composite order product, The ID of the composite order product
            In case the order product is not part of a composite order product, -1.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.Cost">
            <summary>
            The cost of producing this order product.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.CircleInfo">
            <summary>
            Details of the XM (Campaign or touchpoint) order product.
            NULL if the order product is not an XM order product.
            </summary>
        </member>
        <member name="P:uStoreAPI.OrderProduct.StoreID">
            <summary>
            The ID of the store in which the order was created.
            </summary>
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetOrderProductList(System.Int32,System.Boolean)">
            <summary>
            Returns a list of Order Products for the given order.
            </summary>
            <param name="orderId">ID of the Order whose Order Products are requested.</param>
            <param name="isReturnDrafts">
            Use 'true' in case drafts are also requested. Drafts are items for which the process of ordering has been started, not completed.
            </param>
            <returns>Array of data of the Order Products that are part of the given Order.</returns>    
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetOrderProductListByQueue(System.Int32)">
            <summary>
            Returns all the Order Products that are in the given Queue.
            </summary>
            <param name="queueId">
            ID of the Queue whose Order Product list is requested.
            The list of possible values for the queueId parameter can be found in the Admin application
            under Presets/System Setup/Order Handling Status.
            </param>
            <returns>Array of data of the Order Products that are in the given Queue.</returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetOrderProductHistory(System.Int32,System.Int32)">
            <summary>
            Returns the data of the Order Products which were checked out by the given user in the given Store.
            </summary>
            <param name="storeId">ID of the Store in which the user's Order Product History is requested.</param>
            <param name="userId">ID of the user whose Order Product History is requested.</param>
            <returns>An array of data of Order Products.</returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetOrderProduct(System.Int32)">
            <summary>
            Returns the data of the given Order Product.
            </summary>
            <param name="orderProductId">ID of the requested Order Product (Order Item).</param>
            <returns>Data of the given Order Product.</returns>       
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetProofList(System.Int32)">
            <summary>
            Returns a list of all the Proof jobs that were created for the given Order Product.
            </summary>
            <param name="orderProductId">ID of the Order Product (Order Item) whose Proof List is requested.</param>
            <returns>Array of data of the Proof jobs that were created for this Order Product.</returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetDraftOrderProductList(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a list of the latest drafts made by the given user in the given Store.
            A draft is an Order Product that the user did not add to the Shopping Cart.
            </summary>
            <param name="storeId">ID of the Store in which drafts are requested.</param>
            <param name="userId">ID of the user whose drats are requested.</param>
            <param name="count">The number of drafts to return.</param>
            <returns>Array of data of the Order Products which are the latest drafts.</returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.DeleteOrderProduct(System.Int32)">
            <summary>
            Deletes the given Order Product.
            </summary>
            <param name="orderProductId">ID of the Order Prodcut to be deleted.</param>
        </member>
        <member name="M:uStoreAPI.OrderProduct.RecalculatePrice(System.Int32)">
            <summary>
            This method recalculates the prices of the given Order Product.
            </summary>
            <param name="orderProductId">ID of the Order Product whose prices will be recalculated.</param>
            <returns>The data of the Order Product with the recalculated prices.</returns>
            <remarks>
            The method will also update the Order Product and Order Details.
            The method requires that the Order Product be in the Shopping Cart.
            </remarks>
        </member>
        <member name="M:uStoreAPI.OrderProduct.UpdateQuantityPerRecipeint(System.Int32,System.Int32)">
            <summary>
            This method updates the quantity per Recipient and recalculates prices.
            </summary>
            <param name="orderProductId">ID of the Order Product whose quantity per Recipient will be updated.</param>
            <param name="quantityPerRecipient">The new quantity per Recipient to update to.</param>
            <returns>The data of the Order Product with the new quantities and prices.</returns>
            <remarks>
            This method will throw an exception if the total quantity is not above the minimum price step.
            The method will also update the Order Product and Order Details with the new prices.
            The method requires that the Order Product  be in the Shopping Cart.
            </remarks>
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetCompositeSubOrderProductsList(System.Int32)">
            <summary>
            Returns the Sub Order Products of an order product of type 'composite'
            </summary>
            <param name="orderProductId">ID of the parent Order Product</param>
            <returns>Array of data of the sub order products  of the given order product.</returns>
            <remarks>
            If this a XM product, this will return the touch points
            </remarks>
        </member>
        <member name="M:uStoreAPI.OrderProduct.GetFileSubmissionDocument(System.Int32)">
            <summary>
            Returns the File Submission document of the component Order Product.
            </summary>
            <param name="subOrderProductId">ID of the component Order Product.</param>
            <returns>The instance of the FileSubmissionDocument, associated with the given component Order Product.</returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.Reorder(System.Int32,System.Boolean@)">
            <summary>
            Reorders the given Order Product and places it in the Shopping Cart.
            </summary>
            <param name="orderProductId">ID of the Order Product to be reordered.</param>
            <param name="isSuccessful">
            True if and only if the reordering was successful.
            False if the reordering was not completed successfully.
            The reordering may be unsuccessful in case the Product pricing definitions were changed since the original order,
            and the new Order price cannot be determined.
            </param>
            <returns>ID of the new Order Product</returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.MoveToQueue(System.Int32,System.Int32)">
            <summary>
            Moves the given Order Product to the given Queue and invokes the relevant trigger.
            </summary>
            <param name="orderProductId">ID of the Order Product to be moved.</param>
            <param name="queueId">
            ID of the Queue to which the Order Product is being moved.
            The list of possible values for the queueId parameter can be found in the Admin application
            under Presets/System Setup/Order Handling Status.
            </param>
        </member>
        <member name="M:uStoreAPI.OrderProduct.MoveToQueue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the given Order Product to the given Queue and invokes the relevant trigger.
            </summary>
            <param name="orderProductId">ID of the Order Product to be moved.</param>
            <param name="queueId">
            ID of the Queue to which the Order Product is being moved.
            The list of possible values for the queueId parameter can be found in the Admin application
            under Presets/System Setup/Order Handling Status.
            </param>        
            <param name="userId">ID of the User</param>
        </member>
        <member name="M:uStoreAPI.OrderProduct.ListOrderProductJobStatus(System.Int32[])">
            <summary>
            Checks the Production job status of each given Order Product.
            </summary>
            <param name="orderProductIds">An array of Order Products whose job status is required.</param>
            <returns>
            An array containing the job status of each given Order Product, respectively.
            The possible values are as follows:
            Unknown     = -1,
            Waiting     = 1,
            In Progress = 2,
            Completed   = 3,
            Failed      = 4,
            Aborting    = 5,
            Aborted     = 6,
            On Demand   = 7,
            Suspended   = 8.
            </returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.CreateOrderProduct(System.Int32,System.Int32)">
            <summary>
            Creates an order product for the given product and given cart.
            </summary>
            <param name="productId">The ID of the product for which to create the order product.</param>
            <param name="orderId">The ID of the given cart for which to create the order product.</param>
            <returns>The ID of the created order product.</returns>
            <remarks>
            This method can only be used with static products, or dynamic products with no recipient list and no customization.
            Property values cannot be set; properties can only be used using their default value.
            </remarks>
            <seealso cref="M:uStoreAPI.OrderProduct.SetDelivery(System.Int32,System.Int32,System.Nullable{System.Int32})" />
            <seealso cref="M:uStoreAPI.OrderProduct.AddOrderProductToCart(System.Int32,System.Int32,System.Int32)" />
        </member>
        <member name="M:uStoreAPI.OrderProduct.AddOrderProductToCart(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an order product (item) to the cart.
            </summary>
            <param name="orderProductId">The ID of the order product to be added.</param>
            <param name="orderId">The ID of the cart's order.</param>
            <param name="quantity">The total quantity of items to add.</param>
            <seealso cref="M:uStoreAPI.OrderProduct.CreateOrderProduct(System.Int32,System.Int32)"/>
        </member>
        <member name="M:uStoreAPI.OrderProduct.DecryptOrderProductId(System.String)">
            <summary>
            Decrypts a cipher data string that holds an encrypted order product ID.
            </summary>
            <param name="encryptedOrderProductId">Cipher data string that holds an encrypted order product ID.</param>
            <returns>Plain, numeric order product ID</returns>
        </member>
        <member name="M:uStoreAPI.OrderProduct.SetDelivery(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Set delivery for order product.
            </summary>
            <param name="orderProductId">
            The ID of the order product to set its delivery.
            </param>
            <param name="deliveryMethod">
            The ID of the delivery method.
            Possible delivery methods:   
            Shipping    = 1
            Mailing     = 2
            Void        = 3
            </param>
            <param name="deliveryServiceId">
            The ID for the delivery service.
            Delivery service must be set for mailing.
            For Mail Drop service use the value 3.
            If the delivery method is not mailing, use null.
            </param>
            <seealso cref="M:uStoreAPI.OrderProduct.CreateOrderProduct(System.Int32,System.Int32)"/>
        </member>
        <member name="M:uStoreAPI.OrderProduct.VerifyProductCartIntegrity(System.Int32,System.Int32)">
            <summary>
            Verifies product and cart integrity:
            1. Product and cart's order exists
            2. Product is online.
            3. Given order is a cart. 
            4. Product and cart belongs to the same store.
            </summary>
            <param name="productId">The ID of the product to validate.</param>
            <param name="orderId">The ID of the cart's order to validate.</param>
        </member>
        <member name="M:uStoreAPI.OrderProduct.VerifyCompositeOrderProduct(System.Int32)">
            <summary>
            Verifies composite order product:
            1. Order product exists.
            2. Order product is a composite.
            3. Composite product has an upload component configuration
            </summary>
            <param name="orderProductId">The ID of the order product to  validate.</param>
        </member>
        <member name="M:uStoreAPI.OrderProduct.InitOrderProduct(System.Int32)">
            <summary>
            currently set void delivery.
            </summary>
            <param name="orderProductId"></param>
        </member>
        <member name="T:uStoreAPI.Product">
            <summary>
            Product Class is used to handle Products. A Product is a Static or Dynamic Document, which can be sold in online Stores.
            </summary>
        </member>
        <member name="M:uStoreAPI.Product.#ctor">
            <summary>
            Initializes a new instance of the Product class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ProductID">
            <summary>
            Unique ID of the Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.StoreID">
            <summary>
            ID of the Store to which the Product belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.Name">
            <summary>
            The name of the Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ShortDescrition">
            <summary>
            A short Product description that is displayed in the Products list.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.Description">
            <summary>
            A detailed description of this Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.HasPricing">
            <summary>
            Indicates whether this Product has pricing.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.EnableRecipientListModels">
            <summary>
            Checks whether this Product uses Recipient lists.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.CreatedDate">
            <summary>
            The date and time of the creation of this Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.CreatedLoginSessionID">
            <summary>
            The ID of the session in which this Product was created.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ModifiedDate">
            <summary>
            The date and time of the last edit of this Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ModifiedLoginSessionID">
            <summary>
            The ID of the session in which this Product was last edited.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.DisplayOrder">
            <summary>
            The display order of this Product in the Products list of the Product Group. 
            A Product with a lower display order will be displayed above a Product with a higher display order.
            The lowest possible display order is 1.
            </summary>
            <remarks>TODO</remarks>
        </member>
        <member name="P:uStoreAPI.Product.StatusID">
            <summary>
            The status of this Product.
            Possible values are:
            0 = Offline
            1 = Online
            2 = Deleted
            3 = Under construction
            4 = Not used.       
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.PricingModelID">
            <summary>
            The ID of the pricing model that is used for this Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ExternalID">
            <summary>
            Identifies the Product in other systems.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.EnableUedit">
            <summary>
            Indicates whether the user can edit the Document online using uEdit. Applicable only for XLIM documents.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.UeditHelpText">
            <summary>
            Help text, in case uEdit is used for this Product.
            For example: "Please preview and revise your Document as needed"
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.UeditCustomerDisplayMode">
            <summary>
            The display mode of the uEdit control.
            Possible values are:
            0 = Simple
            1 = Basic
            2 = Advanced.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.UeditCustomerViewMode">
            <summary>
            The view mode of the uEdit control.
            This is the way that dynamic data is viewed in the uEdit control.
            Possible values are:
            0 = Fields (For example, [FirstName] will be displayed)
            1 = Samples (For example, John will be displayed)
            2 = My Values (A value given to [FirstName] during customization will be displayed).
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.EnableProofApproval">
            <summary>
            Indicates whether the user must approve the Proof before adding the Product to the cart.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ProofApprovalText">
            <summary>
            The text displayed next to the checkbox that must be used by the customer for Proof approval.
            This text may be empty in case 'EnableProofApproval' is false.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ProofApprovalError">
            <summary>
            Error message displayed if 'EnableProofApproval' is true but
            the customer pressed the 'Add to Cart' button without approving the Proof first.
            This message may be empty in case 'EnableProofApproval' is false.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.IsDeliveryManualProductAmount">
            <summary>
            Indicates whether the package capacity is configured manually (otherwise, it is configured automatically by Product weight).
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.DefaultProofType">
            <summary>
            The type of file that will be produced by a Proof job.
            Possible values are: 
            0 = JPG
            1 = PDF
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.DocumentID">
            <summary>
            ID of the Document on which the Product is based.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.KeyWords">
            <summary>
            Search keywords seperated by commas.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.EnableProofGeneration">
            <summary>
            Indicates whether the user can generate a Proof before adding the Product to the cart.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.TopNavigationButtonsVisible">
            <summary>
            Indicates whether the top navigation buttons will be visible during the Product order process.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ShowShortDesc">
            <summary>
            Indicates whether the short description will be displayed in the Product list.
            This property is obsolete and always returns true.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ShowMinPrice">
            <summary>
            Indicates whether the minimum price will be displayed in the Product list.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ProductNameDisplayID">
            <summary>
            Indicates how the Product name &amp; catalog number are displayed in the Products list in the Store.
            Possible values are:
            1 = Name/Catalog No.
            2 = Catalog No..Name
            3 = Catalog No.-Name
            4 = Catalog No./Name
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.CatalogNumber">
            <summary>
            The catalog number of this Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.UeditFontsUseSelected">
            <summary>
            True in case the admin configured uEdit to use 'choose from list'.
            False in case the admin configured uEdit to use 'All fonts'.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.ProductProfileID">
            <summary>
            ProductProfileID that this product is linked to. If none exists holds -1.
            </summary>
        </member>
        <member name="P:uStoreAPI.Product.TaxGroupID">
            <summary>
            ID of the tax group of this product
            </summary>
        </member>
        <member name="M:uStoreAPI.Product.GetProductList(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Retrieves an array containing all the Products in the product group.
            </summary>
            <param name="productGroupId">ID of the Product Group whose Product list is requested.</param>
            <param name="cultureId">ID of the culture in which the Product information (name, for example) is requested. This ID can be retrieved using CultureWS.</param>
            <param name="isReturnInactive">Use true in order to retrieve all the Products, including those which are not online.</param>
            <returns>An array of data of the Products which belong to the given Product Group.</returns>
        </member>
        <member name="M:uStoreAPI.Product.GetProductListByStore(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Retrieves an array containing all the Products in the Store.
            </summary>
            <param name="storeId">ID of the Store whose Product list is requested.</param>
            <param name="cultureId">ID of the culture in which the Product information (name, for example) is requested. This ID can be retrieved using CultureWS.</param>
            <param name="isReturnInactive">
            Use 'false' in order to retrieve online Products only.
            Use 'true' in order to retrieve all the Products, including those which are not online.
            </param>
            <param name="isReturnHidden">
            Use 'false' in order to retrieve storefront groups Products only.
            Use 'true' in order to retrieve all the Products, including those which are in hidden (component) groups.
            </param>
            <returns>An array of data of the Products which belong to the given Store.</returns>
        </member>
        <member name="M:uStoreAPI.Product.GetProduct(System.Int32,System.Int32)">
            <summary>
            Returns the data of the given Product in the given culture.
            </summary>
            <param name="productId">ID of the requested Product.</param>
            <param name="cultureId">ID of the culture in which the Product information (name, for example) is requested. This information can be retrieved using CultureWS.</param>
            <returns>Data of the given Product</returns>
        </member>
        <member name="M:uStoreAPI.Product.GetProductThumbnails(System.Int32)">
            <summary>
            Returns an array containing the thumbnail files of the given Product.
            </summary>
            <param name="productId">ID of the Product whose thumbnails are requested.</param>
            <returns>An array of the thumbnail files.</returns>
        </member>
        <member name="M:uStoreAPI.Product.GetProductIDByExternalID(System.Int32,System.String)">
            <summary>
            Gets the lowest ID of a product having the given externalProductID.
            </summary>
            <param name="storeId">storeId</param>
            <param name="externalProductID">externalProductID</param>
            <returns>productID</returns>
        </member>
        <member name="M:uStoreAPI.Product.GetProductIDsByExternalID(System.String)">
            <summary>
            Gets the IDs of all products having the given externalProductID (not in the scope of a specific store).
            </summary>
            <param name="externalProductID">externalProductID</param>
            <returns>array of productIDs</returns>
        </member>
        <member name="T:uStoreAPI.ProductGroup">
            <summary>
            Product Group Class is used to handle Product Groups.
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductGroup.#ctor">
            <summary>
            Initializes a new instance of the ProductGroup class.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.ProductGroupID">
            <summary>
            The ID of this Product Group.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.StoreID">
            <summary>
            The ID of the Store to which this Product Group belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.CultureID">
            <summary>
            The ID of the culture in which the localized information is returned.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.Name">
            <summary>
            The name of this Product Group.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.Description">
            <summary>
            A detailed description of this Product Group.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.CreatedLoginSessionID">
            <summary>
            The ID of the session in which this Product Group was created.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.CreatedDate">
            <summary>
            The date and time when this Product Group was created.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.ModifiedLoginSessionID">
            <summary>
            The ID of the session in which this Product Group was modified for the last time.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.ModifiedDate">
            <summary>
            The date and time when this Product Group was last modified.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.DisplayOrder">
            <summary>
            The display order of this Product Group within the Product Groups of the same parent group.
            The top most group will have 1 as its display order, and any Product Group below will have a display order greater than 1.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.StatusID">
            <summary>
            The status of this Product Group
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.CustomHeaderUrl">
            <summary>
            URL to an HTML or ASCX file. This file is the custom header of the products list page of this Product Group.
            This member can be empty.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.ParentGroupID">
            <summary>
            The ID of the parent group of this Product Group in the Product Groups tree.
            -1 in case this Product Group has no parent.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductGroup.ProductGroupTypeID">
            <summary>
            The type of this Product Group
            Possible values are:
            1 = Default: product group which is displayed in the storefront tree
            and can contain dynamic, static, email and composite products.
            2 = Hidden: product group which is not displayed in storefront tree, but participates in file submission process.
            Can contain composite product components, such as dynamic, static and upload products.
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductGroup.GetProductGroupList(System.Int32,System.Int32)">
            <summary>
            Returns an array containing the Product Groups of the given Store.
            </summary>
            <param name="storeId">ID of the Store whose Product Groups are requested.</param>
            <param name="cultureId">ID of the culture in which the Product Groups' data (name, for example) is requested. This information can be retrieved using CultureWS.</param>
            <returns>An array of data of the Product Groups in the given Store.</returns>
        </member>
        <member name="M:uStoreAPI.ProductGroup.GetProductGroup(System.Int32,System.Int32)">
            <summary>
            Returns the data of the given Product Group.
            </summary>
            <param name="productGroupId">ID of the requested Product Group.</param>
            <param name="cultureId">ID of the culture in which the Product Group information (name, for example) is requested. This information can be retrieved using CultureWS</param>
            <returns>Data of the given Product Group</returns>
        </member>
        <member name="T:uStoreAPI.Proof">
            <summary>
            Proof Class is used to handle Proofs.
            </summary>
        </member>
        <member name="M:uStoreAPI.Proof.#ctor">
            <summary>
            Initializes a new instance of the Proof class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.ProofID">
            <summary>
            The ID of this Proof in uStore.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.OrderProductID">
            <summary>
            The ID of the Order Product (Order Item) for which this Proof was generated.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.ProofDate">
            <summary>
            The date and time when this Proof was generated.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.UProduceProofJobID">
            <summary>
            The Proof job ID of this Proof.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.IsProofSuccessful">
            <summary>
            Indicates whether this Proof job was successful (or failed).
            True, if the proof is known to be successful.
            False, In case the proof status is unknown or the proof was not successful.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.RecipientCount">
            <summary>
            The number of Recipients for which this Proof was generated.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.IsProofSeen">
            <summary>
            Indicates whether this Proof was seen by the customer.
            </summary>
        </member>
        <member name="P:uStoreAPI.Proof.FileExtension">
            <summary>
            The file extension of this Proof.
            For example .jpg
            </summary>
        </member>
        <member name="T:uStoreAPI.ProductProperty">
            <summary>
            Product Property Class is used to handle Product properties. Product properties allow you to define Product features that will affect (or not) a Product pricing, the delivery price calculation and more.
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductProperty.#ctor">
            <summary>
            Initializes a new instance of the ProductProperty class.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.PropertyID">
            <summary>
            The ID of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.Name">
            <summary>
            The name of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.ExternalID">
            <summary>
            An external ID to identify the ProductProperty in other systems.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.Description">
            <summary>
            A detailed description of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.DefaultValue">
            <summary>
            The default value of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.Options">
            <summary>
            This member is not empty in case the value of this property must be selected from a list.
            In that case this array contains all the possible options of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.UIControlTypeID">
            <summary>
            The type of the User Interface control which is used to display this Dial.
            Possible values are:
            3 = Multiline Text Input
            4 = Radio Button
            5 = Text Input
            6 = Image Selector
            7 = Popup Image Selector
            8 = Dropdown List
            9 = DateTime Picker
            10= Generic HTML
            11= Dropdown List Advanced
            12= Radio Button List Advanced
            13= Get Order Properties
            14= Checkbox
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.UIControlParamsXml">
            <summary>
            An XML that contains additional information required by the user about the control, such as, for example, its look and behavior.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.DisplayOrder">
            <summary>
            The display order of this property.
            A property with a lower display order will be displayed above a property with a higher display order.
            The lowest possible display order is zero.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.PropertyValueAutoFillTypeID">
            <summary>
            The type of auto-filling for this property's User Interface Control
            Possible values are:
            1 = None
            2 = UseDefaultValue
            3 = HistorySameProduct
            4 = HistoryAllProductsInStore
            5 = HistoryAllProductsInAllStores
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.StatusID">
            <summary>
            The status of this Product Group
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.ProductID">
            <summary>
            The ID of the Product to which this property belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.IsGlobal">
            <summary>
            Indicates whether this property is a global property. A global property does not belong to any Product, but can be copied to a Product property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.MandatoryInEveryProduct">
            <summary>
            Indicates whether this property is required in each and every Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.StoreAdminMayChangeValue">
            <summary>
            Indicates whether a Store administrator may change the value of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.StoreAdminMayChangeConfig">
            <summary>
            Indicates whether a Store administrator may change the configuration of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.VisibleToCustomer">
            <summary>
            Indicates whether this property is visible to the customer.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.CustomerMayChangeValue">
            <summary>
            Indicates whether the customer is allowed to change the value of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.UsedInPricingCalculation">
            <summary>
            Indicates whether this property is required for pricing calculation.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.UsedInShippingCostCalculation">
            <summary>
            Indicates whether this property is required for shipping price calculation.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.SuperUserMayChangeConfig">
            <summary>
            Indicates whether a superuser may change the configuration of this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.AffectsAggregation">
            <summary>
            Indicates whether this property affects aggregation, that is, two Order Products may be aggregated only if the option selected by the customer for this property is the same. For example, two Order Products may be aggregated only if the selected stock in both is glossy.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.UsedForLogicalName">
            <summary>
            Indicates whether this property is used for the logical name of the Order Item. In case it is true, the value of this property along with its value will appear in the Shopping Cart and Order History.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.BasePropertyID">
            <summary>
            In case this property was created based on a global property, this is the ID of that global property.
            The ID of the global property may be any integer number, including negative numbers.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.DatasourceQueryID">
            <summary>
            The ID of the Data Source that is used to prepopulate the options for this property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.UsedForSplitShipping">
            <summary>
            Indicates whether this property has an affect on shipping, 
            so in case different options are selected, shipping will be splitted.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.DependentOnFieldOptionID">
            <summary>
            If the property is dependent on another property, the ID of the option on which this property is dependent.
            If the property is independent, -1.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductProperty.PropertyUnitID">
            <summary>
            The ID of the property unit.
            In an Upload product the property unit is:
            1 = Page,
            2 = Sheet.
            In any other product, it will have the value -1.
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductProperty.GetProductPropertyList(System.Int32,System.Int32)">
            <summary>
            Returns the list of properties of the given Product.
            </summary>
            <param name="productId">ID of the Product whose properties are requested.</param>
            <param name="cultureId">ID of the culture in which the Product property information (name, for example) is requested. This information can be retrieved using CultureWS</param>
            <returns>An array of data of the properties of the given Product.</returns>
        </member>
        <member name="M:uStoreAPI.ProductProperty.GetProductProperty(System.Int32,System.Int32)">
            <summary>
            Returns the data of the given property.
            </summary>
            <param name="productPropertyId">ID of the requested Product property.</param>
            <param name="cultureId">ID of the culture in which the Product property information (name, for example) is requested. This data can be retrieved using CultureWS.</param>
            <returns>Data of the given Product property.</returns>
        </member>
        <member name="M:uStoreAPI.ProductProperty.GetProductPropertyValueList(System.Int32)">
            <summary>
            Return an array of all the Product property values for the given Order Product.
            </summary>
            <param name="orderProductId">ID of the Order Product whose Product property value list is requested.</param>
            <returns>An array of Product property value data for the given Order Product.</returns>
        </member>
        <member name="M:uStoreAPI.ProductProperty.GetProductPropertyValue(System.Int32,System.Int32)">
            <summary>
            Returns the value which the given property received during the order of the given Order Product.
            </summary>
            <param name="orderProductId">ID of the Order Product in which the property value is requested.</param>
            <param name="productPropertyId">ID of the Product property whose value is requested.</param>
            <returns>Data of the property value of the given property in the given Order Product.</returns>
        </member>
        <member name="T:uStoreAPI.ProductPropertyValue">
            <summary>
            Product Property Value Class handles values assigned to Product properties.
            </summary>
        </member>
        <member name="M:uStoreAPI.ProductPropertyValue.#ctor">
            <summary>
            Initializes a new instance of the ProductPropertyValue class.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductPropertyValue.OrderProductDialValueID">
            <summary>
            Unique ID of the pair (Property, OrderProduct)
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductPropertyValue.OrderProductID">
            <summary>
            ID of the Order Product.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductPropertyValue.PropertyID">
            <summary>
            ID of the property.
            </summary>
        </member>
        <member name="P:uStoreAPI.ProductPropertyValue.Value">
            <summary>
            The value of this property in this order Product.
            </summary>
            <remarks>
            When using a Date Time Picker control or a File Attachment control the value will be an XML.
            In case of File Attachment, the XML will contain the relative paths of the attached files.
            </remarks>
        </member>
        <member name="T:uStoreAPI.RecipientList">
            <summary>
            Recipient List Class handles Recipients. 
            A Recipient is the person who receives an individual instance of the Document purchased in the online Store. 
            A Recipient List is used in Dynamic Documents. Each Recipient may receive a personalized version of the Document, which has been 
            customized by the Customer who ordered this Product, and personalized based on this Recipient’s specific data, such as his name and address. 
            </summary>
        </member>
        <member name="M:uStoreAPI.RecipientList.#ctor">
            <summary>
            Initializes a new instance of the RecipientList class.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.RecipientListID">
            <summary>
            The ID of this Recipient List
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.FilePath">
            <summary>
            The path of the uploaded Recipient List file on the server.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.FileName">
            <summary>
            The original name of the Recipient List file that was uploaded.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.SourceTable">
            <summary>
            The name of the Recipient list table in the file that was uploaded. 
            For example, in the case of an Excel file, this will be the sheet name.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.Format">
            <summary>
            The format of the Recipient list file.
            Possible values are:
            1 = Excel
            2 = MDB
            3 = XMPieServer
            4 = Xml        
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.ItemCount">
            <summary>
            The number of Recipients in this Recipient List.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.SourceXml">
            <summary>
            An XML file that represents this Recipient List.
            The root node is named 'NewDataSet' and the node of each Recipient is named 'RecipientList'. Each 'RecipientList' node contains a child node
            for each field in the schema
            </summary>
            <example>
            <code>
            &lt;NewDataSet&gt;
                &lt;RecipitentList&gt;
                    &lt;CustomerID&gt;1&lt;/CustomerID&gt;
                    &lt;FirstName&gt;David&lt;/FirstName&gt;
                    &lt;LastName&gt;Rain&lt;/LastName&gt;
                &lt;/RecipitentList&gt;
                &lt;RecipitentList&gt;
                    &lt;CustomerID&gt;2&lt;/CustomerID&gt;
                    &lt;FirstName&gt;Mark&lt;/FirstName&gt;
                    &lt;LastName&gt;Pit&lt;/LastName&gt;
                &lt;/RecipitentList&gt;
                &lt;RecipitentList&gt;
                    &lt;CustomerID&gt;3&lt;/CustomerID&gt;
                    &lt;FirstName&gt;Joan&lt;/FirstName&gt;
                    &lt;LastName&gt;Cool&lt;/LastName&gt;
                &lt;/RecipitentList&gt;
            &lt;/NewDataSet&gt;        
            </code>
            </example>
        </member>
        <member name="P:uStoreAPI.RecipientList.MallID">
            <summary>
            The ID of the mall to which this Recipient List belongs. Usually 1.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.UserID">
            <summary>
            The ID of the user whom this Recipient List belongs to.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.RecipientType">
            <summary>
            The type of this Recipient list.
            Possible values are:
            1 = CustomerUploaded
            2 = ServerLocated
            3 = ServerWithFilter
            4 = QueryBased
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.DateCreated">
            <summary>
            The date and time fo the creation of this Recipient List.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.IsRepository">
            <summary>
            Indicates whether this Recipient List is in the repository.
            A Recipient List that is in the repository will be listed by the Recipient List manager, so it can be used again. It will not be used
            in an order, but instead it will be duplicated, and the duplicated Recipient List will be used in the order.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.CampaignID">
            <summary>
            The ID of the Campaign (in uStore) to which the Document of this Recipient list belongs.
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.StatusID">
            <summary>
            The status of this Recipient List.
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.RecipientListModelID">
            <summary>
            The ID of the Recipient List model (plug-in) of this Recipient List.
            Usually will have the value 4 (=upload).
            </summary>
        </member>
        <member name="P:uStoreAPI.RecipientList.Description">
            <summary>
            A detailed description of this Recipient List.
            </summary>
        </member>
        <member name="M:uStoreAPI.RecipientList.GetRecipientList(System.Int32)">
            <summary>
            Returns the data of the given Recipient List.
            </summary>
            <param name="recipientListId">ID of the requested Recipient List.</param>
            <returns>Data of the given Recipient List.</returns>
        </member>
        <member name="M:uStoreAPI.RecipientList.AddRecipientList(uStoreAPI.RecipientList)">
            <summary>
            Adds a new recipient list with the given data
            </summary>
            <param name="recipientList">
            Recipient list object containing the recipient list information to add, without the RecipientListID
            Required fields are MallID, RecipientType and Format
            </param>
            <returns>The ID of the newly added recipient list</returns>
        </member>
        <member name="M:uStoreAPI.RecipientList.UpdateRecipientList(uStoreAPI.RecipientList)">
            <summary>
            Updates an existing recipient list with the given data
            </summary>
            <param name="recipientList">
            Recipient list object containing the recipient list information to update with, 
            including the RecipientListID of the recipient list to update
            </param>
            <returns>True if the recipient list was updated successfuly</returns>
        </member>
        <member name="M:uStoreAPI.RecipientList.BeginDownloadRecipientListFromCircle(System.Int32)">
            <summary>
            Begins an asynchronous download of the recipient list of an XM Campaign.
            </summary>
            <param name="orderProductId">The ID of the order product which it's recipient list is requested.</param>
            <returns>A Circle asynchronous request ID.</returns>
            <seealso cref="M:uStoreAPI.RecipientList.DownloadRecipientListFromCircle(System.Int32,System.Guid)"/>
        </member>
        <member name="M:uStoreAPI.RecipientList.DownloadRecipientListFromCircle(System.Int32,System.Guid)">
            <summary>
            Downloads the recipient list of an XM Campaign order product to uProduce Temp Storage.
            </summary>
            <param name="orderProductId">The ID of the XM Campaign order product.</param>
            <param name="requestId">The ID of the asynchronous request.</param>
            <returns>
            The recipient list file token.
            An empty string if the download has not been completed yet.
            </returns>
            <seealso cref="M:uStoreAPI.RecipientList.BeginDownloadRecipientListFromCircle(System.Int32)"/>
            <seealso cref="M:uStoreAPI.RecipientList.DownloadRecipientListByToken(System.Int32,System.String)"/>
        </member>
        <member name="M:uStoreAPI.RecipientList.DownloadRecipientListByToken(System.Int32,System.String)">
            <summary>
            Downloads the recipient list of an XM Campaign order product to uStore server.
            </summary>
            <param name="orderProductId">The ID of the XM Campaign order product.</param>
            <param name="token">The recipient list file token.</param>
            <returns>The path to the recipient list file.</returns>
            <seealso cref="M:uStoreAPI.RecipientList.DownloadRecipientListFromCircle(System.Int32,System.Guid)"/>
        </member>
        <member name="M:uStoreAPI.RecipientList.BeginDownloadUnsubscribeListFromCircle(System.Int32)">
            <summary>
            Begins an asynchronous download of the unsubscribe list of an XM Campaign.
            </summary>
            <param name="orderProductId">The ID of the order product which it's unsubscribe list is requested.</param>
            <returns>A Circle asynchronous request ID.</returns>
            <seealso cref="M:uStoreAPI.RecipientList.DownloadUnsubscribeListFromCircle(System.Int32,System.Guid)"/>
        </member>
        <member name="M:uStoreAPI.RecipientList.DownloadUnsubscribeListFromCircle(System.Int32,System.Guid)">
            <summary>
            Downloads the unsubscribe list of an XM Campaign order product to uProduce Temp Storage.
            </summary>
            <param name="orderProductId">The ID of the XM Campaign order product.</param>
            <param name="requestId">The ID of the asynchronous request.</param>
            <returns>
            The unsubscribe list file token.
            An empty string if the download has not been completed yet.
            </returns>
            <seealso cref="M:uStoreAPI.RecipientList.BeginDownloadUnsubscribeListFromCircle(System.Int32)"/>
            <seealso cref="M:uStoreAPI.RecipientList.DownloadUnsubscribeListByToken(System.Int32,System.String)"/>
        </member>
        <member name="M:uStoreAPI.RecipientList.DownloadUnsubscribeListByToken(System.Int32,System.String)">
            <summary>
            Downloads the unsubscribe list of an XM Campaign order product to uStore server.
            </summary>
            <param name="orderProductId">The ID of the XM Campaign order product.</param>
            <param name="token">The unsubscribe list file token.</param>
            <returns>The path to the unsubscribe list file.</returns>
            <seealso cref="M:uStoreAPI.RecipientList.DownloadUnsubscribeListFromCircle(System.Int32,System.Guid)"/>
        </member>
        <member name="M:uStoreAPI.RecipientList.BeginDownloadListFromCircle(System.Int32,System.Func{uStore.Common.BLL.CircleProjectOrderProduct,uStore.Common.BLL.Circle.CircleConnection,System.Guid})">
            <summary>
            Begins the download of a recipient list or an unsubscribe list from Circle.
            </summary>
        </member>
        <member name="M:uStoreAPI.RecipientList.DownloadListFromCircle(System.Int32,System.Guid,System.Func{uStore.Common.BLL.CircleProjectOrderProduct,uStore.Common.BLL.Circle.CircleConnection,System.Guid,System.String})">
            <summary>
            Downloads a recipient list or an unsubscribe list from Circle to uProduce temp storage.
            </summary>
            <returns>
            The temp storage token.
            </returns>
        </member>
        <member name="M:uStoreAPI.RecipientList.DownloadListByToken(System.Int32,System.String,System.Boolean)">
            <summary>
            Downloads a recipient list or an unsubscribe list of an XM Campaign order product to uStore server.
            </summary>
        </member>
        <member name="T:uStoreAPI.ReturnObject">
            <summary>
            This is the base class for all the object types which are returned by the API.
            </summary>
            <exclude/>
        </member>
        <member name="M:uStoreAPI.ReturnObject.SetDefaultValues">
            <summary>
            Set default values for each property according to its type.
            This will make sure that null fields will appear in the XML file.
            </summary>
        </member>
        <member name="M:uStoreAPI.ReturnObject.SetProperties(System.Object)">
            <summary>
            Fills the properties of the return object by copying
            the fields and properties of the src object (which is usually defined in uStore.Common.BLL)
            </summary>
        </member>
        <member name="M:uStoreAPI.ReturnObject.HandleValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Returns the field value after manipulations.
            For example, we would like to return a nullable integer as -1.
            Any other required manipulation can be added here.
            </summary>
            <param name="property">The destination property to which we would like to copy the value.</param>
            <param name="value">The value of the copied field or property.</param>
        </member>
        <member name="M:uStoreAPI.ReturnObject.FillBllObject(System.Object)">
            <summary>
            This method fills an object (usually a BLL object) with the values of this return object
            This is done by giving each field of the object the value of a property of this return object with the same name
            </summary>
            <param name="bllObject">
            An empty object which its fields will be filled from the properties of this return object
            </param>
        </member>
        <member name="T:uStoreAPI.Store">
            <summary>
            Store Class is used to handle Stores. A Store is a a virtual shop that has been set up by a uStore Superuser using the uStore Admin application, 
            and is available to Customers via the uStore Customer application.
            </summary>
        </member>
        <member name="M:uStoreAPI.Store.#ctor">
            <summary>
            Initializes a new instance of the Store class.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.StoreID">
            <summary>
            The ID of this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.CultureID">
            <summary>
            The ID of the culture in which the localized data is returned, such as the Store name or Welcome text.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.MallID">
            <summary>
            The ID of the mall to which this Store belongs. Usually 1.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.Name">
            <summary>
            The name of this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.Description">
            <summary>
            A detailed description of this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.WelcomeText">
            <summary>
            The text that appears on the Login &amp; Home pages of the Store, below the header title.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.HeaderTitle">
            <summary>
            The text that appears on the Store header.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.UproduceUser">
            <summary>
            The user that is used by this Store to connect to uProduce server.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.LandingDomain">
            <summary>
            The domain name of this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.LandingFolder">
            <summary>
            The folder of this Store. 
            This field may have a non empty value only if LandingDomain is not empty. 
            When this field is not empty, the Store will be accessible by http://LandingDomain/LandingFolder.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.HasPricing">
            <summary>
            Indicates whether this Store has a pricing model.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.HasDelivery">
            <summary>
            Indicates whether this Store has a delivery method (either shipping or mailing).
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.StatusID">
            <summary>
            The status of this Store.
            Possible values are:
            0 = Offline
            1 = Online
            2 = Deleted
            3 = Under construction
            4 = Not used       
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.WelcomePageUrl">
            <summary>
            URL for the home page of this Store. In case it is empty, the uStore default Welcome page is used.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.WelcomePageSql">
            <summary>
            An SQL statement that can be used to transfer information to the Welcome page.
            This SQL statement can use MallID,StoreID and UserID as parameters.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.EnableRegistration">
            <summary>
            Indicates whether user registration is enabled in this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.RegistrationText">
            <summary>
            The text of the registration link in the Store Login page.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.RegistrationUrl">
            <summary>
            The URL to which the registration link navigates.
            Usually it is null, and uStore default Registration page is used.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.OrderConfirmationText">
            <summary>
            The text that is displayed in the Order Summary page below the Order number.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.ExternalID">
            <summary>
            An external ID of this Store that can be used by other systems.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.UsadataAccountID">
            <summary>
            The ID of the USADATA account used by this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.PricingModelID">
            <summary>
            The ID of the pricing model used as a default in this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.DefaultProofType">
            <summary>
            The default Proof type used in this Store.
            Each new Product is created with this Proof type as default.
            Possible values are:
            0 = JPG
            1 = PDF
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.ShowProductSearch">
            <summary>
            Indicates whether to show the Product search bar above the Product Groups tree.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.PickupAddressID">
            <summary>
            The ID of the pickup address of this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.CustomHeaderUrl">
            <summary>
            URL to an HTML or ASCX file which is the header for this Store.
            If this field is empty, the uStore's default header is used.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.CustomFooterUrl">
            <summary>
            URL to an HTML or ASCX file which is the footer for this Store.
            If this field is empty, the uStore's default footer is used.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.ProductListPreviewStyleID">
            <summary>
            The Product Lists display mode in this Store.
            Possible values are:
            1 = List (One Product below the other)
            2 = Grid (Usually 3 Products in one row)
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.OrderDetailsDescription">
            <summary>
            The text that is displayed in the Order Details page above the Order Items grid.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.ShoppingCartDescription">
            <summary>
            The text that is displayed below the Shopping Cart.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.UproduceEmailProviderID">
            <summary>
            The ID of uProduce delivery provider that is used for sending notification emails for this Store.
            In case the Store uses SMTP which is defined in uStore, the value of this field is -1
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.ProductListAllowPaging">
            <summary>
            Indicates whether paging is used in the Product lists and search results in this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.ProductsPerPage">
            <summary>
            The number of products in each page of a Product list or search results in this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.SslOption">
            <summary>
            The SLL configuration of this Store.
            Possible values are:
            0 = NotSecured
            1 = SecureAll
            2 = SecureCriticalPoints
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.SkinID">
            <summary>
            The ID of the skin used in this Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.SetupCultureID">
            <summary>
            The ID of the culture used by the Store administrator to setup this Store.
            When browsing the Admin application, Store details are displayed in the setup culture.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.DefaultCultureID">
            <summary>
            The ID of the default browsing culture of this Store.
            A customer will browse this Store in this culture if its browser culture does not match any of this Store's cultures.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.AnonymousUsersGroupId">
            <summary>
            The ID of the User Group to which Anonymous Users logging into this store will be added.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.RegisteredUsersGroupId">
            <summary>
            The ID of the User Group to which users registering to this store will be added.
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.TaxFormatTypeID">
            <summary>
            Gets or sets the tax fromat type for this store
            Possible values are:
            1 = Prices excluding tax, 
            2 = Prices including tax
            3 = A custome format
            </summary>
        </member>
        <member name="P:uStoreAPI.Store.PrimaryCurrencyID">
            <summary>
            Gets or Sets the Primary Currency ID of the store
            </summary>
        </member>
        <member name="M:uStoreAPI.Store.GetStoreList(System.Int32,System.Boolean)">
            <summary>
            Returns an array of the Stores in the given mall.
            </summary>
            <param name="mallId">ID of the mall whose Store List is requested. It will usually be 1.</param>
            <param name="isReturnOfflineStore">Use true to retrieve all the Stores, false to retrieve online Stores only.</param>
            <returns>
            An array of data of the Stores in the mall.
            The data of each Store is returned in the Store setup culture.
            </returns>
        </member>
        <member name="M:uStoreAPI.Store.GetStore(System.Int32,System.Int32)">
            <summary>
            Returns the Store data for the given Store.
            </summary>
            <param name="storeId">ID of the requested Store.</param>     
            <param name="cultureId">ID of the culture in which the Store information (name, for example) is requested. This information can be retrieved using CultureWS</param>
            <returns>Data of the given Store.</returns>
        </member>
        <member name="T:uStoreAPI.Tax">
            <summary>
            Tax class offers methods for invoking uStore tax calculation engine.
            </summary>
        </member>
        <member name="M:uStoreAPI.Tax.CalculateTax(System.Decimal,System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Calculates and returns the preview tax shown in store for the given product with the given prices.
            </summary>
            <param name="subtotalPrice">The subtotal price of the ordered product.</param>
            <param name="recipientListPrice">Additional recipient list price.</param>
            <param name="mailingPrice">Additional mailing price.</param>
            <param name="productId">The ID of the product which is ordered.</param>
            <returns>
            The sum of tax that was calculated.
            If the store policy is to exclude tax, returns zero.
            </returns>
        </member>
        <member name="M:uStoreAPI.Tax.CalculateTax(System.Decimal,System.Decimal,System.Decimal,uStoreAPI.Product,uStoreAPI.Store,System.Int32)">
            <summary>
            Calculates and returns the preview tax shown in store for the given product with the given prices.
            </summary>
            <param name="subtotalPrice">The subtotal price of the ordered product.</param>
            <param name="recipientListPrice">Additional recipient list price.</param>
            <param name="mailingPrice">Additional mailing price.</param>
            <param name="product">Object of the product which is ordered.</param>
            <param name="store">Object of the store in which the order is being made.</param>
            <param name="cultureId">The ID of the culture to use by the method.</param>
            <returns>
            The sum of tax that was calculated.
            If the store policy is to exclude tax, returns zero.
            </returns>
        </member>
        <member name="T:uStoreAPI.TentativeDelivery">
            <summary>
            Tentative Delivery Class.
            This class handles tentative deliveries, which are the deliveries made by a customer during order checkout.
            The back office user can later split, unite or change the provider and service. The shipping address is not tentative.
            </summary>
        </member>
        <member name="M:uStoreAPI.TentativeDelivery.#ctor">
            <summary>
            Initializes a new instance of the TentativeDelivery class.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.TentativeDeliveryID">
            <summary>
            The ID of this tentative delivery
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.OrderID">
            <summary>
            The ID of the order this tentative deliery belongs to.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.PickupAddressID">
            <summary>
            The ID of the pickup address for this tentative delivery.
            If there is no pickup address, it will have one of the values -1 or 0.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.DeliveryMethod">
            <summary>
            The delivery method for this delivery.
            Possible values are:
            Shipping    = 1
            Mailing     = 2
            Void        = 3
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.DeliveryServiceID">
            <summary>
            The ID of the delivery service for this tentative delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.DeliveryPrice">
            <summary>
            The cost of this tentative delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.DeliveryItems">
            <summary>
            An array of all the delivery items which are part of this tentative delivery.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_Name">
            <summary>
            The name of the person to whom this tentative delivery is shipped.
            In case the delivety method is not shipping, this field will be empty as well as any other shipping address field.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_Company">
            <summary>
            The name of the company to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_Add1">
            <summary>
            The first address line of the address to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_Add2">
            <summary>
            The second address line of the address to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_City">
            <summary>
            The name of the city to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_StateName">
            <summary>
            The name of the state to which this tentative delivery is shipped.
            This property is localized and will be empty if cultureId was not passed to the service.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_StateId">
            <summary>
            The ID of the state to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_Zip">
            <summary>
            The zip code of the address to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_Phone">
            <summary>
            The phone number of the address to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_Fax">
            <summary>
            The fax number of the address to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_CountryName">
            <summary>
            The name of the country to which this tentative delivery is shipped.
            This property is localized and will be empty if cultureId was not passed to the service.
            </summary>
        </member>
        <member name="P:uStoreAPI.TentativeDelivery.Ship_CountryId">
            <summary>
            The ID of the country to which this tentative delivery is shipped.
            </summary>
        </member>
        <member name="M:uStoreAPI.TentativeDelivery.GetTentativeDelivery(System.Int32,System.Int32)">
            <summary>
            Returns the data of the tentative delivery which its ID is given.
            </summary>
            <param name="tentativeDeliveryId">ID of the requested tentative delivery</param>
            <param name="cultureId">ID of the culture in which the state and country name will be returned</param>
            <returns>TentativeDelivery object</returns>
        </member>
        <member name="M:uStoreAPI.TentativeDelivery.GetTentativeDeliveryList(System.Int32)">
            <summary>
            Returns an array of the tentative deliveries of the order with the given ID.
            </summary>
            <param name="orderId">ID of the order which its tentative delivery list is requested.</param>
            <returns>An array of TentativeDelivery objects.</returns>
        </member>
        <member name="T:uStoreAPI.Trigger">
            <summary>
            Trigger class is used in order to invoke Trigger events. Triggers are Rule components that dispatch Actions in specific events.
            </summary>
        </member>
        <member name="M:uStoreAPI.Trigger.InvokeCustomerRegistrationEvent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes the event of customer registration. Any Trigger that is defined for this event will be fired.
            </summary>
            <param name="userId">ID of the new regstered user.</param>
            <param name="storeId">ID of the Store to which the user has registered.</param>
            <param name="cultureId">ID of the culture in which the email will be sent. This culture must exist in the given Store.</param>
        </member>
        <member name="M:uStoreAPI.Trigger.InvokeCustomerUpdateEvent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes the event of customer details update in storefront. Any Trigger that is defined for this event will be fired.
            </summary>
            <param name="userId">ID of the updated user.</param>
            <param name="storeId">ID of the Store where the update occured.</param>
            <param name="cultureId">ID of the culture in which the email will be sent. This culture must exist in the given Store.</param>
        </member>
        <member name="M:uStoreAPI.Trigger.InvokeOrderSubmissionEvent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes the event of Order Submission. Any Trigger that is defined for this event will be fired.
            </summary>
            <param name="orderId">ID of the submittend Order.</param>
            <param name="storeId">ID of the Store in which the given Order was made.</param>
            <param name="cultureId">ID of the culture in which an email will be sent. This culture must exist in the given Store.</param>
        </member>
        <member name="M:uStoreAPI.Trigger.InvokeReorderEvent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes the Reorder event. Any Trigger that is defined for this event will be fired.
            </summary>
            <param name="oldOrderProductId">ID of the Order Product that was reordered.</param>
            <param name="newOrderProductId">ID of the Order Product that was created by the Reorder method.</param>
            <param name="storeId">ID of the Store in which the Order Product was reordered.</param>
            <param name="cultureId">ID of the culture in which an email will be sent. This culture must exist in the given Store.</param>
        </member>
        <member name="M:uStoreAPI.Trigger.InvokeInventoryChangedEvent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes the event of Inventory Changed. Any Trigger that is defined for this event will be fired.
            </summary>
            <param name="productId">ID of the product that it's inventory was changed.</param>
            <param name="orderProductId">ID of the item in order that caused the inventory to change.</param>
            <param name="orderId">ID of the submittend Order.</param>
            <param name="storeId">ID of the Store in which the given Order was made.</param>
            <param name="cultureId">ID of the culture in which an email will be sent. This culture must exist in the given Store.</param>
        </member>
        <member name="M:uStoreAPI.Trigger.InvokeInventoryLevelIsLowEvent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes the event of Inventory Level Is Low. Any Trigger that is defined for this event will be fired.
            </summary>
            <param name="productId">ID of the product that it's inventory level is low.</param>
            <param name="orderProductId">ID of the item in order that caused the inventory to change.</param>
            <param name="orderId">ID of the submittend Order.</param>
            <param name="storeId">ID of the Store in which the given Order was made.</param>
            <param name="cultureId">ID of the culture in which an email will be sent. This culture must exist in the given Store.</param>
        </member>
        <member name="M:uStoreAPI.Trigger.InvokeEvent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,uStoreAPI.General.Parameter[])">
            <summary>
            Invokes any event by ID (can be used with custom events)
            </summary>
            <param name="eventId">
            ID of the Event invoked.
            Use one of the following events, or a custom event. For additional information about custom events see <see href="CustomEventSetup.html">Setting up a custom event</see>.
            1 = User Registration In Admin Application
            2 = User Registration In Storefront
            3 = State Transition
            4 = Order Submission
            5 = OrderProduct Enters Shopping Cart
            6 = User Login In Storefront
            7 = Reorder
            8 = Delivery Created
            9 = Password Recovery
            10 = Redirect Clearing Failed
            11 = USADATA Clearing Failed
            12 = Change Approver Notification To New Approver
            13 = Change Approver Notification To Old Approver
            14 = Order Rejection
            15 = Order Sent To Approval
            16 = Order Approved
            17 = User Pending Registration
            18 = Approval Changed
            19 = User Update In Admin Application
            20 = User Update In Storefront
            21 = Inventory Level Is Low
            22 = Inventory Changed
            23 = Order Item Printed Job Ticket
            24 = uProduce Connectivity Error
            25 = Order Modification
            </param>
            <param name="storeId">ID of the Store in which the given Order was made. Use -1 if store ID is irrelevant.</param>
            <param name="cultureId">ID of the culture in which an email will be sent. This culture must exist in the given Store.</param>
            <param name="productId">ID of a product. Use -1 if product ID is irrelevant.</param>
            <param name="orderProductId">ID of an item in an order Use -1 if order product ID is irrelevant..</param>
            <param name="orderId">ID of an Order. Use -1 if order ID is irrelevant.</param>
            <param name="userId">ID of the user the event is performed for</param>
            <param name="additionalParameters">
            additional parameters in the key,value form.
            The key can be used later in an action plug-in implementation, or in a message template as //Parameters/key.
            </param>
            <remarks>
            For frequently used events, use one of the specific methods such as InvokeOrderSubmissionEvent.
            </remarks>
            <seealso href="CustomEventSetup.html">Setting up a custom event</seealso>
        </member>
        <member name="T:uStoreAPI.User">
            <summary>
            The User Class handles user-related information.
            </summary>
        </member>
        <member name="M:uStoreAPI.User.#ctor">
            <summary>
            Initializes a new instance of the User class.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.UserID">
            <summary>
            The ID of this user.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Login">
            <summary>
            The email address of this user used to login to a Store.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.FirstName">
            <summary>
            The first name of this user.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.LastName">
            <summary>
            The last name of this user.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Email">
            <summary>
            The email address of this user which is used for sending emails.
            Usually the same as the login.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.UserTypeID">
            <summary>
            The type of this user.
            Possible values are:
            1 = Customer
            2 = Store Administrator
            3 = Store Operator
            4 = Super User
            </summary>
        </member>
        <member name="P:uStoreAPI.User.CreatedLoginSessionID">
            <summary>
            The ID of the session in which this user was created.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.CreatedDate">
            <summary>
            The date and time of the creation of this user.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.ModifiedLoginSessionID">
            <summary>
            The ID of the session in which this user was last modified.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.ModifiedDate">
            <summary>
            The date and time when this user was modified for the last time.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.StatusID">
            <summary>
            The status of this user.
            Possible values are:
            0 = Inactive
            1 = Active
            2 = Deleted
            3 = Under construction
            4 = Not used
            </summary>
        </member>
        <member name="P:uStoreAPI.User.ExternalID">
            <summary>
            An external ID of this user which can be used to link it to other systems.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.PhoneNumber">
            <summary>
            Telephone of this user.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.MobileNumber">
            <summary>
            Mobile phone number of this user
            </summary>
        </member>
        <member name="P:uStoreAPI.User.FaxNumber">
            <summary>
            Fax number of this user
            </summary>
        </member>
        <member name="P:uStoreAPI.User.CompanyName">
            <summary>
            Name of the company which this user works for
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Department">
            <summary>
            Department of this user.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.JobTitle">
            <summary>
            Job title of this user
            </summary>
        </member>
        <member name="P:uStoreAPI.User.IsActivated">
            <summary>
            Whether this user is activated (when registering a store with activation enabled).
            In case activation is not enabled in the store, it is always True.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.IsLocked">
            <summary>
            Gets or sets whether this user has been locked out and cannot login.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.AssignedToStoreID">
            <summary>
            The ID of the store, to which the user is assigned. This value defines an isolation scope, where the user's email address (login) is unique.
            Zero means that the user's email address (login) is unique in entire system.
            -1 means that the store, to which the user is assigned, was deleted.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.GenderID">
            <summary>
            Gender of this user
            Possible values are:
            1 = Male
            2 = Female
            </summary>
        </member>
        <member name="P:uStoreAPI.User.BirthDay">
            <summary>
            The date of birth of this user. If not set, or NULL in the database, returns <see cref="F:System.DateTime.MinValue"/>
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Custom1">
            <summary>
            Custom field. The display name of this field might be customized in uStore Back Office.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Custom2">
            <summary>
            Custom field. The display name of this field might be customized in uStore Back Office.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Custom3">
            <summary>
            Custom field. The display name of this field might be customized in uStore Back Office.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Custom4">
            <summary>
            Custom field. The display name of this field might be customized in uStore Back Office.
            </summary>
        </member>
        <member name="P:uStoreAPI.User.Custom5">
            <summary>
            Custom field. The display name of this field might be customized in uStore Back Office.
            </summary>
        </member>
        <member name="M:uStoreAPI.User.GetUserByEmail(System.String)">
            <summary>
            Returns the data of the given user, which is assigned to entire system (all stores).
            </summary>
            <param name="email">The email address used by the user to login.</param>
            <returns>Data of the given user.</returns>
        </member>
        <member name="M:uStoreAPI.User.GetUserByEmail(System.String,System.Int32)">
            <summary>
            Returns the data of the given user, which is assigned to the given store.
            </summary>
            <param name="email">The email address used by the user to login.</param>
            <param name="assignedToStoreID">The ID of the store, to which the user is assigned and where the user's email address (login) is unique.</param>
            <returns>Data of the given user.</returns>
        </member>
        <member name="M:uStoreAPI.User.GetUser(System.Int32)">
            <summary>
            Returns the data of the given user.
            </summary>
            <param name="userId">ID of the requested user.</param>
            <returns>Data of the given user.</returns>
        </member>
        <member name="M:uStoreAPI.User.GetUserByExternalID(System.String)">
            <summary>
            Returns the data of the user by external ID which can be used to link it to other systems.
            The user must have active status, referenced by <see cref="P:uStoreAPI.User.StatusID"/> value.
            </summary>
            <param name="externalID">An external ID of the user.</param>
            <returns>An instance of user if found and is active, otherwise null.</returns>
            <remarks>The <see cref="P:uStoreAPI.User.ExternalID"/> field is not unique, therefore in case of multiple matching records, only first one will be returned.</remarks>
        </member>
        <member name="M:uStoreAPI.User.ListByExternalIDPrefix(System.String)">
            <summary>
            Returns the list of the active users with the external ID which matches the given prefix.
            </summary>
            <param name="externalIDPrefix">The prefix of the external ID to match.</param>
            <returns>An array of data of the active users with the external ID which matches the given prefix.</returns>
        </member>
        <member name="M:uStoreAPI.User.ValidateUser(System.String,System.String)">
            <summary>
            Checks whether a user with the given email address (login) and password, when the login is unique in entire system (all stores), exists.
            </summary>
            <param name="email">The email address which is used by the customer to login.</param>
            <param name="password">The password of the customer whose login is given in the previous parameter.</param>
            <returns>True if a user with the given login and password exists and are globally unique.</returns>
            <remarks>Use this method to check if only one user with given login exists and the correct password is entered.</remarks>
        </member>
        <member name="M:uStoreAPI.User.ValidateUser(System.String,System.String,System.Int32)">
            <summary>
            Checks whether a user with the given email address (login) and password, when the login is unique in given Store, exists.
            </summary>
            <param name="email">The email address which is used by the customer to login.</param>
            <param name="password">The password of the customer whose login is given in the previous parameter.</param>
            <param name="assignedToStoreID">The ID of the store, to which the user is assigned and where the user's email address (login) is unique.</param>
            <returns>True if a user with the given login and password exists and are unique in the given store.</returns>
            <remarks>Use this method to check if such user exists in the given Store and the correct password is entered.</remarks>
        </member>
        <member name="M:uStoreAPI.User.GetUserByCustomer(System.Int32)">
            <summary>
            Returns the data of the user of the given customer. 
            </summary>
            <param name="customerId">Id of the requested customer</param>
            <returns>User data of the given customer</returns>
        </member>
        <member name="M:uStoreAPI.User.AddCustomer(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new user of type customer with the given details.
            </summary>
            <param name="firstName">First name of the new customer (up to 100 characters).</param>
            <param name="lastName">Last name of the new customer (up to 100 characters).</param>
            <param name="email">Email of the new customer (up to 50 characters). It will also be used as the customer login.</param>
            <param name="userPassword">Password of the new customer (up to 50 characters).</param>
            <param name="externalId">The external ID of the customer, which can be used for integration.</param>
            <returns>The ID of the added user.</returns>
        </member>
        <member name="M:uStoreAPI.User.AddUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new user with the given details and globally unique email address.
            </summary>
            <param name="firstName">First name of the new user (up to 100 characters).</param>
            <param name="lastName">Last name of the new user (up to 100 characters).</param>
            <param name="email">
            Email of the new user (up to 50 characters). It will also be used as the user login.
            Must be unique in entire system, no other user with the same email address can be created.
            </param>
            <param name="userPassword">Password of the new user (up to 50 characters).</param>
            <param name="externalId">The external ID of the user, which can be used for integration.</param>
            <returns>The ID of the added user.</returns>
            <remarks>
            Does not validate user's password against store's password policy.
            Please use the UserGroup class in order to add the user to a group and grant permissions.
            </remarks>
        </member>
        <member name="M:uStoreAPI.User.AddUser(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new user with the given details and assigns it to a given store.
            </summary>
            <param name="firstName">First name of the new user (up to 100 characters).</param>
            <param name="lastName">Last name of the new user (up to 100 characters).</param>
            <param name="email">
            Email of the new user (up to 50 characters). It will also be used as the user login.
            Must be unique in the store, specified by <paramref name="assignedToStoreId"/>.
            A users with the same email address can be created in other stores.
            </param>
            <param name="userPassword">Password of the new user (up to 50 characters).</param>
            <param name="externalId">The external ID of the user, which can be used for integration.</param>
            <param name="assignedToStoreId">
            The ID of the store, to which the user is assigned.
            This value defines an isolation scope, where the user's email address (login) is unique.
            </param>
            <returns>The ID of the added user.</returns>
            <remarks>
            Does not validate user's password against store's password policy.
            Please use the UserGroup class in order to add the user to a group and grant permissions.
            </remarks>
        </member>
        <member name="M:uStoreAPI.User.UpdateCustomer(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the user details with the given ID
            </summary>
            <param name="userId">The ID of the user whose update is requested.</param>
            <param name="firstName">The new first name.</param>
            <param name="lastName">The new last name.</param>
            <param name="email">The new email address (also used for login).</param>
            <param name="userPassword">The new password.</param>
            <param name="externalId">The new external ID.</param>
            <remarks>This method will throw an exception in case the input is invalid, the user is not found, or the update fails.</remarks>
        </member>
        <member name="M:uStoreAPI.User.UpdateUser(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the details of the user with the given ID.
            (Does not validate user's password against store's password policy)
            </summary>
            <param name="userId">The ID of the user whose update is requested.</param>
            <param name="firstName">The new first name.</param>
            <param name="lastName">The new last name.</param>
            <param name="email">The new email address (also used for login).</param>
            <param name="userPassword">The new password.</param>
            <param name="externalId">The new external ID.</param>
            <remarks>This method will throw an exception in case the input is invalid, the user is not found, or the update fails.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:uStoreAPI.User.UpdateUserDetails(uStoreAPI.User)" -->
        <member name="M:uStoreAPI.User.CheckUser(System.String,System.String,System.String,System.String)">
            <summary>
            Checks if the given input is legal and the user can be added or updated.
            Otherwise throws an exception.
            </summary>
        </member>
        <member name="M:uStoreAPI.User.GetStoreAdministratorList(System.Int32)">
            <summary>
            Returns the list of users who are administrators of the given store.
            </summary>
            <param name="storeId">ID of the store whose administrators list is requested.</param>
            <returns>An array of data of all the users who are administrators in the given store.</returns>
            <remarks>
            This method is obsolete. uStore no longer has User Roles. It is recommended to use the relevant methods in UserGroup.
            </remarks> 
        </member>
        <member name="M:uStoreAPI.User.GetStoreOperatorList(System.Int32)">
            <summary>
            Returns the list of users who are operators of the given Store.
            </summary>
            <param name="storeId">ID of the Store for which the operators list is requested.</param>
            <returns>An array of data of the users who are operators of the given Store.</returns>
            <remarks>
            This method is obsolete. uStore no longer has User Roles. It is recommended to use the relevant methods in UserGroup.
            </remarks>
        </member>
        <member name="M:uStoreAPI.User.GetSuperUserList">
            <summary>
            Returns the list of users who are super users.
            </summary>
            <returns>An array of data of all the users who are assigned the role of Superuser.</returns>
            <remarks>
            This method is obsolete. uStore no longer has roles. It is recommended to use relevant methods in UserGroup.
            </remarks>
        </member>
        <member name="M:uStoreAPI.User.GetSingleSignonUrlToWelcomePage(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns an encrypted Single Sign on URL for landing in the Welcome page of the given store using the given culture
            </summary>
            <param name="email">The user login email.</param>
            <param name="storeId">ID of the store which will be browsed by the customer.</param>
            <param name="cultureId">
            ID of the culture in which the customer will view the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case the user will view the Store in his/hers
            browser culture or the nearest culture, if it is available in the Store, or in the Store default culture, if not.
            </param>
            <param name="addToCartUrl">URL to which the customer will be redirected when adding an item to the Shopping Cart.</param>
            <param name="logoutUrl">URL to which the customer will be redirected when loging out of the Store.</param>
            <param name="cancelUrl">URL to which the customer will be redirected when clicking Cancel or Back on the first page.</param>
            <param name="currencyId">
            ID of the currency by which the customer will view the Store. The Currency ID can be retrieved using CurrencyInfo API.
            The default value is NULL. In this case, the currency stored in the user's cookie will be used. If no cookie is available, the primary currency of the store will be used.
            </param>
            <returns>An encrypted Single Sign on URL with the given details.></returns>
        </member>
        <member name="M:uStoreAPI.User.GetSingleSignonUrlToProductGroup(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns an encrypted Single Sign on URL for landing in the Product List page of the given Product group.
            </summary>
            <param name="email">The user login email.</param>
            <param name="productGroupId">ID of the Product group to whose Product List page the customer will be redirected.</param>
            <param name="cultureId">
            ID of the culture in which the customer will view the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case the user will view the Store in his/hers
            browser culture or the nearest culture, if it is available in the Store, or in the Store default culture, if not.
            </param>
            <param name="addToCartUrl">URL to which the customer will be redirected when adding an Order Item to the Shopping Cart.</param>
            <param name="logoutUrl">URL to which the customer will be redirected when loging out of the Store.</param>
            <param name="cancelUrl">URL to which the customer will be redirected when clicking Cancel or Back on the first page.</param>
            <param name="currencyId">
            ID of the currency by which the customer will view the Store. The Currency ID can be retrieved using CurrencyInfo API.
            The default value is NULL. In this case, the currency stored in the user's cookie will be used. If no cookie is available, the primary currency of the store will be used.
            </param>
            <returns>An encrypted Single Sign on URL with the given details.></returns>
        </member>
        <member name="M:uStoreAPI.User.GetSingleSignonUrlToProductDetails(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns an encrypted Single Sign on URL for landing in the Product Details page of the given product using the given culture.
            </summary>
            <param name="email">The user login email.</param>
            <param name="productId">ID of the Product to whose Details page the customer will be redirected.</param>
            <param name="cultureId">
            ID of the culture in which the customer will view the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case the user will view the Store in his/hers
            browser culture or the nearest culture, if it is available in the Store, or in the Store default culture, if not.
            </param>
            <param name="addToCartUrl">URL to which the customer will be redirected when adding an Order Item to the Cart.</param>
            <param name="logoutUrl">URL to which the customer will be redirected when loging out of the Store.</param>
            <param name="cancelUrl">URL to which the customer will be redirected when clicking Cancel or Back on the first page.</param>
            <param name="currencyId">
            ID of the currency by which the customer will view the Store. The Currency ID can be retrieved using CurrencyInfo API.
            The default value is NULL. In this case, the currency stored in the user's cookie will be used. If no cookie is available, the primary currency of the store will be used.
            </param>
            <returns>An encrypted Single Sign on URL with the given details.></returns>
        </member>
        <member name="M:uStoreAPI.User.GetSingleSignonUrlToProductDetails(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns an encrypted Single Sign on URL for landing in the Product Details page of the given product using the given culture.
            </summary>
            <param name="email">The user login email.</param>
            <param name="storeId">The ID of the store to which the product with the given external ID belongs</param>
            <param name="externalProductId">
            External ID of the Product to whose Details page the customer will be redirected.
            This ID should be unique per store.
            </param>
            <param name="cultureId">
            ID of the culture in which the customer will view the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case the user will view the Store in his/hers
            browser culture or the nearest culture, if it is available in the Store, or in the Store default culture, if not.
            </param>
            <param name="addToCartUrl">URL to which the customer will be redirected when adding an Order Item to the Cart.</param>
            <param name="logoutUrl">URL to which the customer will be redirected when loging out of the Store.</param>
            <param name="cancelUrl">URL to which the customer will be redirected when clicking Cancel or Back on the first page.</param>
            <param name="currencyId">
            ID of the currency by which the customer will view the Store. The Currency ID can be retrieved using CurrencyInfo API.
            The default value is NULL. In this case, the currency stored in the user's cookie will be used. If no cookie is available, the primary currency of the store will be used.
            </param>
            <returns>An encrypted Single Sign on URL with the given details.></returns>
        </member>
        <member name="M:uStoreAPI.User.GetSingleSigonUrlToOrderWizard(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns an encrypted Single Sign on URL for landing in the first page of the order wizard with the given details.
            A user should land in the Order Wizard in case there is no interest in the Product Details page.
            </summary>
            <param name="email">The user login email.</param>
            <param name="productId">ID of the Product that the customer will order using the Order Wizard.</param>
            <param name="orderProductId">
            ID of the Order Product that will be edited or continued by the customer using the Order Wizard.
            This parameter is optional, -1 may be used as an empty value.
            </param>
            <param name="cultureId">
            ID of the culture in which the customer will view the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case the user will view the Store in his/hers
            browser culture or the nearest culture, if it is available in the Store, or in the Store default culture, if not.
            </param>
            <param name="addToCartUrl">URL to which the customer will be redirected when adding an Order Item to the Shopping Cart.</param>
            <param name="logoutUrl">URL to which the customer will be redirected when loging out of the Store.</param>
            <param name="cancelUrl">URL to which the customer will be redirected when clicking Cancel or Back on the first page.</param>
            <param name="currencyId">
            ID of the currency by which the customer will view the Store. The Currency ID can be retrieved using CurrencyInfo API.
            The default value is NULL. In this case, the currency stored in the user's cookie will be used. If no cookie is available, the primary currency of the store will be used.
            </param>
            <returns>An encrypted Single Sign on URL with the given details.></returns>
        </member>
        <member name="M:uStoreAPI.User.GetSingleSignonUrlToFinalizePage(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns an encrypted Single Sign on URL for landing in the Finalize page with the given details.
            A user should land in the Finalize page when editing an Order Product from a Shopping Cart.
            </summary>
            <param name="email">The user login email.</param>
            <param name="orderProductId">ID of the Order Product that will be edited by the customer using the Order Wizard.</param>
            <param name="cultureId">
            ID of the culture in which the customer will view the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case the user will view the Store in his/hers
            browser culture or the nearest culture, if it is available in the Store, or in the Store default culture, if not.
            </param>
            <param name="addToCartUrl">URL to which the customer will be redirected when adding an Order Item to the Cart.</param>
            <param name="logoutUrl">URL to which the customer will be redirected when loging out of the Store.</param>
            <param name="cancelUrl">URL to which the customer will be redirected when clicking Cancel or Back on the first page.</param>
            <param name="currencyId">
            ID of the currency by which the customer will view the Store. The Currency ID can be retrieved using CurrencyInfo API.
            The default value is NULL. In this case, the currency stored in the user's cookie will be used. If no cookie is available, the primary currency of the store will be used.
            </param>
            <returns>An encrypted Single Sign on URL with the given details.></returns>
        </member>
        <member name="M:uStoreAPI.User.GetSinlgeSignonUrlToLandingPage(uStore.Common.BLL.General.LandingPages,System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the Single Sign On URL for the given landing page.
            </summary>
        </member>
        <member name="M:uStoreAPI.User.GetSingleSignOnUrl(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Returns an encrypted Single Sign on URL with the given details.
            </summary>
            <param name="email">Login of the customer that will be redirected to the Store using the returned Single Sign on URL.</param>
            <param name="userPassword">Password of the customer whose login is provided in the previous parameter.</param>
            <param name="storeId">ID of the Store to which the customer will be redirected.</param>
            <param name="productId">
            ID of the Product to the Product Details page of which the customer will be redirected.
            This parameter is optional, use -1 in case the use of Product ID is not desired.
            </param>
            <param name="cultureId">
            ID of the culture in which the customer will view the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case the user will view the Store in his/hers
            browser culture or the nearest culture, if it is available in the Store, or in the Store default culture, if not.
            </param>
            <param name="logoutUrl">
            URL to which the customer will be redirected when loging out of the Store.
            This parameter is optional, use an empty string in case the use of logoutUrl is not desired.
            </param>
            <returns>An encrypted Single Sign on URL with the given details.</returns>
        </member>
        <member name="M:uStoreAPI.User.MergeUserData(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves Cart items (including Drafts), created Orders,
            uploaded Recipient Lists and images from a source user (for example, Anonymous User)
            to a target user (for example, Registered User). 
            </summary>
            <param name="fromUserId">The ID of the source user from which the data is copied.</param>
            <param name="toUserId">The ID of the target user to which the data is copied.</param>
            <param name="storeId">The ID of the store where the change is requested.</param>
            <param name="cultureId">
            ID of the culture in which the customer views the Store. This information can be retrieved using CultureWS.
            This parameter is optional, use -1 in case the use of culture ID is not desired. In this case Store setup culture will be used.
            </param>
        </member>
        <member name="M:uStoreAPI.User.VerifyStore(System.Int32)">
            <summary>
            Checks that the Store really exists.
            Otherwise throws an exception.
            </summary>
        </member>
        <member name="M:uStoreAPI.User.VerifyOrder(System.Nullable{System.Int32},System.String,System.Int32,System.Int32)">
            <summary>
            Verifies order product integrity:
            1. Check that it exists.
            2. Check that it was not submitted.
            3. Check that it belongs to the given user and such a user exists.
            </summary>
            <param name="orderProductId">The ID of the order product to validate.</param>
            <param name="email">The email of the user who is making the order.</param>
            <param name="storeId">The ID of the relevant store.</param>
            <param name="cultureId">The ID of the culture used for getting order details.</param>
        </member>
        <member name="T:uStoreAPI.UserGroup">
            <summary>
            User Group Class is used to handle User Groups and User Group membership.
            </summary>
        </member>
        <member name="M:uStoreAPI.UserGroup.#ctor">
            <summary>
            Initializes a new instance of the UserGroup class.
            </summary>
        </member>
        <member name="P:uStoreAPI.UserGroup.UserGroupID">
            <summary>
            The ID of this User Group.
            </summary>
        </member>
        <member name="P:uStoreAPI.UserGroup.ParentGroupId">
            <summary>
            The ID of the parent User Group of this User Group.
            -1 if this User Group is a Root group and hence, has no parent.
            </summary>
        </member>
        <member name="P:uStoreAPI.UserGroup.Name">
            <summary>
            The name of this User Group.
            </summary>
        </member>
        <member name="P:uStoreAPI.UserGroup.Description">
            <summary>
            The description of this User Group.
            </summary>
        </member>
        <member name="P:uStoreAPI.UserGroup.IsAnonymous">
            <summary>
            Whether this User Group is a group of Anonymous Users.
            </summary>
        </member>
        <member name="M:uStoreAPI.UserGroup.GetUserGroupList">
            <summary>
            Returns an array containing the data of all the User Groups.
            </summary>
            <returns>An array of the data of all the User Groups.</returns>
        </member>
        <member name="M:uStoreAPI.UserGroup.GetUserGroupList(System.Int32)">
            <summary>
            Returns an array containing the data of all the user groups which the given user is a member of.
            </summary>
            <param name="userId">ID of the user whose user group list is requested.</param>
            <returns>An array of the data of all the user groups which the given user is a member of.</returns>
        </member>
        <member name="M:uStoreAPI.UserGroup.GetUserGroupList(System.Collections.Generic.List{uStore.Common.BLL.AccessControl.UserGroup})">
            <summary>
            Creates a list of UserGroup return objects out of a list of UserGroup bll objects
            </summary>
        </member>
        <member name="M:uStoreAPI.UserGroup.GetUserGroup(System.Int32)">
            <summary>
            Returns the data of the given User Group.
            </summary>
            <param name="userGroupId">ID of the User Group whose data is requested.</param>
            <returns>Data of the given User Group.</returns>
        </member>
        <member name="M:uStoreAPI.UserGroup.GetUserListByGroup(System.Int32)">
            <summary>
            Returns an array containing the users which are members of the given User Group.
            </summary>
            <param name="userGroupId">ID of the User Group whose User List is requested.</param>
            <returns>An array of the data of the users who are members of the given User Group.</returns>
        </member>
        <member name="M:uStoreAPI.UserGroup.AddUserToGroup(System.Int32,System.Int32)">
            <summary>
            Adds the given User to the given Group. The User will inherit the Group's permissions.
            </summary>
            <param name="userId">The ID of the user to be added to the group.</param>
            <param name="userGroupId">The ID of the group to which the user will be added.</param>
        </member>
        <member name="M:uStoreAPI.UserGroup.RemoveUserFromGroup(System.Int32,System.Int32)">
            <summary>
            Removes the given User from the given Group.
            This may cause the User to lose some permissions.
            </summary>
            <param name="userId">The ID of the User to be removed from the Group.</param>
            <param name="userGroupId">The ID of the Group from which the user will be removed.</param>
        </member>
    </members>
</doc>
